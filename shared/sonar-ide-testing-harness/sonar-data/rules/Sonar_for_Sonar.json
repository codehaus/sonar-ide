[
  {"title":"Abstract Class Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck","plugin":"checkstyle","description":"Ensures that the names of abstract classes conforming to some regular expression.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for abstract classes. Default is ^Abstract.*$|^.*Factory$"}]},
  {"title":"Abstract Class Without Abstract Method","key":"pmd:AbstractClassWithoutAbstractMethod","plugin":"pmd","description":"The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Abstract class without any methods","key":"pmd:AbstractClassWithoutAnyMethod","plugin":"pmd","description":"If the abstract class does not provides any methods, it may be just a data container that is not to be instantiated. In this case, it's probably better to use a private or a protected constructor in order to prevent instantiation than make the class misleadingly abstract. Example :\n<pre>\npublic class abstract Example {\n\tString field;\n\tint otherField;\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Abstract naming","key":"pmd:AbstractNaming","plugin":"pmd","description":"Abstract classes should be named 'AbstractXXX'. Example :\n  <pre>\npublic abstract class Foo { // should be AbstractFoo\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Accessor Class Generation","key":"pmd:AccessorClassGeneration","plugin":"pmd","description":"Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privitization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Add Empty String","key":"pmd:AddEmptyString","plugin":"pmd","description":"Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Android - Protect LOGD","key":"pmd:ProtectLogD","plugin":"pmd","description":"Log.d calls should be protected by checking Config.LOGD first. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void foo() {\n    Log.d(\"TAG\", \"msg1\"); // Bad\n\n    bar();\n\n    if (Config.LOGD) Log.d(\"TAG\", \"msg1\"); // Good\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Android - Protect LOGV","key":"pmd:ProtectLogV","plugin":"pmd","description":"Log.v calls should be protected by checking Config.LOGV first. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void foo() {\n    Log.v(\"TAG\", \"msg1\"); // Bad\n    bar();\n    if (Config.LOGV) Log.v(\"TAG\", \"msg1\"); // Good\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Android - call super first","key":"pmd:CallSuperFirst","plugin":"pmd","description":"Super should be called at the start of the method. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void onCreate(Bundle bundle) {\n    // missing call to super.onCreate(bundle)\n    foo();\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Android - call super last","key":"pmd:CallSuperLast","plugin":"pmd","description":"Super should be called at the end of the method. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void onPause() {\n    foo();\n    // missing call to super.onPause()\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Annotation Use Style","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck","plugin":"checkstyle","description":"Controls the style with the usage of annotations.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"elementStyle","description":"Defines the annotation element styles. Default value is compact_no_array."},{"name":"closingParens","description":"Defines the policy for ending parenthesis. Default is never."},{"name":"trailingArrayComma","description":"Defines the policy for trailing comma in arrays. Default is never."}]},
  {"title":"Anon Inner Length","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.AnonInnerLengthCheck","plugin":"checkstyle","description":"Checks for long anonymous inner classes.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowable number of lines. Default is 20."}]},
  {"title":"Append Character With Char","key":"pmd:AppendCharacterWithChar","plugin":"pmd","description":"Avoid concatenating characters as strings in StringBuffer.append.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Architectural constraint","key":"squid:ArchitecturalConstraint","plugin":"squid","description":"<p>A source code comply to an architectural model when it fully adheres to a set of architectural constraints. A constraint allows to deny references between classes by pattern.</p><p>You can for instance use this rule to :</p><ul><li>forbid access to **.web.** from **.dao.** classes</li><li>forbid access to java.util.Vector, java.util.Hashtable and java.util.Enumeration from any classes</li><li>forbid access to java.sql.** from **.ui.** and **.web.** classes</li></ul>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"fromClasses","description":"Optional. If this property is not defined, all classes should adhere to this constraint. Ex : **.web.**"},{"name":"toClasses","description":"Mandatory. Ex : java.util.Vector, java.util.Hashtable, java.util.Enumeration"}]},
  {"title":"Array Trailing Comma","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.ArrayTrailingCommaCheck","plugin":"checkstyle","description":"Checks if array initialization contains optional trailing comma.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Array Type Style","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck","plugin":"checkstyle","description":"Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])","priority":"MINOR","status":"INACTIVE","params":[{"name":"javaStyle","description":"Controls whether to enforce Java style (true) or C style (false). Default is true."}]},
  {"title":"Assignment In Operand","key":"pmd:AssignmentInOperand","plugin":"pmd","description":"Avoid assignments in operands; this can make code more complicated and harder to read.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Assignment To Non Final Static","key":"pmd:AssignmentToNonFinalStatic","plugin":"pmd","description":"Identifies a possible unsafe usage of a static field.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"At Least One Constructor","key":"pmd:AtLeastOneConstructor","plugin":"pmd","description":"Each class should declare at least one constructor.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Accessibility Alteration","key":"pmd:AvoidAccessibilityAlteration","plugin":"pmd","description":"Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow to alter, at runtime, the visilibilty of variable, classes, or methods, even if they are private. Obviously, no one should do so, as such behavior is against everything encapsulation principal stands for.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Array Loops","key":"pmd:AvoidArrayLoops","plugin":"pmd","description":"Instead of copying data between two arrays, use System.arrayCopy method","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Assert As Identifier","key":"pmd:AvoidAssertAsIdentifier","plugin":"pmd","description":"Finds all places 'assert' is used as an identifier is used.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Calling Finalize","key":"pmd:AvoidCallingFinalize","plugin":"pmd","description":"Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Catching NPE","key":"pmd:AvoidCatchingNPE","plugin":"pmd","description":"Code should never throw NPE under normal circumstances. A catch block may hide the original error, causing other more subtle errors in its wake.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Catching Throwable","key":"pmd:AvoidCatchingThrowable","plugin":"pmd","description":"This is dangerous because it casts too wide a net; it can catch things like OutOfMemoryError.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Avoid Constants Interface","key":"pmd:AvoidConstantsInterface","plugin":"pmd","description":"An interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Decimal Literals In Big Decimal Constructor","key":"pmd:AvoidDecimalLiteralsInBigDecimalConstructor","plugin":"pmd","description":"One might assume that new BigDecimal(.1) is exactly equal to .1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is so because .1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to .1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(.1)' is exactly equal to .1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Deeply Nested If Stmts","key":"pmd:AvoidDeeplyNestedIfStmts","plugin":"pmd","description":"Deeply nested if..then statements are hard to read.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"problemDepth","description":"The if statement depth reporting threshold. Default is 3."}]},
  {"title":"Avoid Duplicate Literals","key":"pmd:AvoidDuplicateLiterals","plugin":"pmd","description":"Code containing duplicate String literals can usually be improved by declaring the String as a constant field. Example :\n<pre>\npublic class Foo {\n private void bar() {\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n }\n private void buz(String x) {}\n}\n</pre>","priority":"MINOR","status":"ACTIVE","params":[{"name":"threshold","description":"The number of duplicate literals reporting threshold. Default is 4."},{"name":"skipAnnotations","description":"Skip literals within Annotations. Default is false."},{"name":"exceptionlist","description":"Strings in that list are skipped."},{"name":"separator","description":"Separator used in the exceptionlist. Default is ,"},{"name":"exceptionfile","description":"File containing strings to skip (one string per line), only used if exceptionlist is not set."}]},
  {"title":"Avoid Enum As Identifier","key":"pmd:AvoidEnumAsIdentifier","plugin":"pmd","description":"Finds all places 'enum' is used as an identifier is used.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Final Local Variable","key":"pmd:AvoidFinalLocalVariable","plugin":"pmd","description":"Avoid using final local variables, turn them into fields. Example :\n<pre>\npublic class MyClass {\n    public void foo() {\n        final String finalLocalVariable;\n    }\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Inline Conditionals","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.AvoidInlineConditionalsCheck","plugin":"checkstyle","description":"Detects inline conditionals.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Avoid Instanceof Checks In Catch Clause","key":"pmd:AvoidInstanceofChecksInCatchClause","plugin":"pmd","description":"Each caught exception type should be handled in its own catch clause.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Avoid Multiple Unary Operators","key":"pmd:AvoidMultipleUnaryOperators","plugin":"pmd","description":"Using multiple unary operators may be a bug, and/or is confusing. Check the usage is not a bug, or consider simplifying the expression. Example :\n<pre>\n// These are typo bugs, or at best needlessly complex and confusing:\nint i = - -1;\nint j = + - +1;\nint z = ~~2;\nboolean b = !!true;\nboolean c = !!!true;\n\n// These are better:\nint i = 1;\nint j = -1;\nint z = 2;\nboolean b = true;\nboolean c = false;\n\n// And these just make your brain hurt:\nint i = ~-2;\nint j = -~7;\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Nested Blocks","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck","plugin":"checkstyle","description":"Finds nested blocks.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"allowInSwitchCase","description":"Allow nested blocks in case statements. Default is false."}]},
  {"title":"Avoid Print Stack Trace","key":"pmd:AvoidPrintStackTrace","plugin":"pmd","description":"Avoid printStackTrace(); use a logger call instead.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Protected Field In Final Class","key":"pmd:AvoidProtectedFieldInFinalClass","plugin":"pmd","description":"Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Reassigning Parameters","key":"pmd:AvoidReassigningParameters","plugin":"pmd","description":"Reassigning values to parameters is a questionable practice. Use a temporary local variable instead.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Rethrowing Exception","key":"pmd:AvoidRethrowingException","plugin":"pmd","description":"Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Star Import","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck","plugin":"checkstyle","description":"Check that finds import statements that use the * notation.","priority":"MINOR","status":"INACTIVE","params":[{"name":"excludes","description":"packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded."}]},
  {"title":"Avoid Static Import","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck","plugin":"checkstyle","description":"<p> Checks that there are no static import statements. Rationale: Importing static members can lead to naming conflicts between class' members. It may lead to poor code readability since it may no longer be clear what class a member resides in (without looking at the import statement).</p>","priority":"MINOR","status":"INACTIVE","params":[{"name":"excludes","description":"Allows for certain classes via a star notation to be excluded such as java.lang.Math.* or specific static members to be excluded like java.lang.System.out for a variable or java.lang.Math.random for a method.\nIf you exclude a starred import on a class this automatically excludes each member individually.\nFor example: Excluding java.lang.Math.*. will allow the import of each static member in the Math class individually like java.lang.Math.PI."}]},
  {"title":"Avoid StringBuffer field","key":"pmd:AvoidStringBufferField","plugin":"pmd","description":"StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time). Example :\n<pre>\nclass Foo {\n\tprivate StringBuffer memoryLeak;\n}\n</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Synchronized At Method Level","key":"pmd:AvoidSynchronizedAtMethodLevel","plugin":"pmd","description":"Method level synchronization can backfire when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Thread Group","key":"pmd:AvoidThreadGroup","plugin":"pmd","description":"Avoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Avoid Throwing Null Pointer Exception","key":"pmd:AvoidThrowingNullPointerException","plugin":"pmd","description":"Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Throwing Raw Exception Types","key":"pmd:AvoidThrowingRawExceptionTypes","plugin":"pmd","description":"Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid Using Hard Coded IP","key":"pmd:AvoidUsingHardCodedIP","plugin":"pmd","description":"An application with hard coded IP may become impossible to deploy in some case. It never hurts to externalize IP adresses.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"pattern","description":"Regular Expression. Default is ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$"}]},
  {"title":"Avoid Using Native Code","key":"pmd:AvoidUsingNativeCode","plugin":"pmd","description":"As JVM and Java language offer already many help in creating application, it should be very rare to have to rely on non-java code. Even though, it is rare to actually have to use Java Native Interface (JNI). As the use of JNI make application less portable, and harder to maintain, it is not recommended.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Using Octal Values","key":"pmd:AvoidUsingOctalValues","plugin":"pmd","description":"Integer literals should not start with zero. Zero means that the rest of literal will be interpreted as an octal value.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Using Short Type","key":"pmd:AvoidUsingShortType","plugin":"pmd","description":"Java uses the short type to reduce memory usage, not to optimize calculation. On the contrary, the jvm does not has an arithmetic capabilities with the type short. So, the P-code must convert the short into int, then do the proper caculation and then again, convert int to short. So, use of the \"short\" type may have a great effect on memory usage.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid Using Volatile","key":"pmd:AvoidUsingVolatile","plugin":"pmd","description":"Use of the keyword \"volatile\" is general used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Morover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Avoid instantiating objects in loops","key":"pmd:AvoidInstantiatingObjectsInLoops","plugin":"pmd","description":"Detects when a new object is created inside a loop","priority":"MINOR","status":"INACTIVE"},
  {"title":"Avoid too complex class","key":"squid:ClassCyclomaticComplexity","plugin":"squid","description":"<p>The Cyclomatic Complexity is measured by the number of (&&, ||) operators and (if, while, do, for, ?:, catch, switch, case, return, throw) statements in the body of a class plus one for each constructor, method (but not getter/setter), static initializer, or instance initializer in the class. The last return stament in method, if exists, is not taken into account.</p><p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the time, a very complex class is a class which breaks the <a href='http://en.wikipedia.org/wiki/Single_responsibility_principle'>Single Responsibility Principle</a> and which should be re-factored to be split in several classes.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"Maximum complexity allowed."}]},
  {"title":"Avoid too complex method","key":"squid:MethodCyclomaticComplexity","plugin":"squid","description":"<p>The Cyclomatic Complexity is measured by the number of (&&, ||) operators and (if, while, do, for, ?:, catch, switch, case, return, throw) statements in the body of a constructor, method, static initializer, or instance initializer. The minimun Cyclomatic Complexity of a method is 1 and the last return stament, if exists, is not taken into account. The more complex is a method, the more possible different paths through the source code exist. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now. Indeed above 10, it's pretty difficult to be able to think about all possible paths when maintaining the source code, so the risk of regression increases exponentially.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"Maximum complexity allowed."}]},
  {"title":"Avoid too deep inheritance tree","key":"squid:MaximumInheritanceDepth","plugin":"squid","description":"<p>Inheritance is certainly one of the most valuable concept of object-oriented programming. It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing of this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code.</p><p>Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when 'composition' would suit better.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"Maximum depth of the inheritance tree."}]},
  {"title":"Avoid unnecessary comparisons in boolean expressions","key":"pmd:SimplifyBooleanExpressions","plugin":"pmd","description":"Avoid unnecessary comparisons in boolean expressions - this complicates simple code. Example :\n<pre>\npublic class Bar {\n // can be simplified to\n // bar = isFoo();\n private boolean bar = (isFoo() == true);\n\n public isFoo() { return false;}\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid use of //NOSONAR marker","key":"squid:NoSonar","plugin":"squid","description":"<p>Any violation to quality rule can be deactivated with the //NOSONAR marker. This marker is pretty useful to exclude false-positive results but sometimes it can abusively be used to hide real quality flaws.</p><p>This rule allows to track and/or forbid use of this marker</p>","priority":"INFO","status":"INACTIVE"},
  {"title":"Avoid use of deprecated method","key":"squid:CallToDeprecatedMethod","plugin":"squid","description":"<p>Once deprecated, a method should no longer be used as it means that the method might be removed sooner or later.</p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Avoid using 'break' branching statement outside a 'switch' statement","key":"squid:AvoidBreakOutsideSwitch","plugin":"squid","description":"<p>The use of the 'break' branching statement increases the essential complexity of the source code and so prevents any refactoring of this source code to replace all well structured control structures with a single statement.</p><p>For instance, with the following java program fragment, it's not possible to apply the 'extract method' refactoring pattern :</p><pre>mylabel : for (int i = 0 ; i< 3; i++) {\n  for (int j = 0; j < 4 ; j++) {\n    doSomething();\n    if (checkSomething()) {\n      break mylabel;\n    }\n  }\n}\n</pre><p>The use of the 'break' branching statement is only authorized inside a 'switch' statement.</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Avoid using 'continue' branching statement","key":"squid:AvoidContinueStatement","plugin":"squid","description":"<p>The use of the 'continue' branching statement increase the essential complexity of the source code and so prevent any refactoring of this source code to replace all well structured control structures with a single statement.</p><p>For instance, in the following java program fragment, it's not possible to apply the 'extract method' refactoring pattern :</p><pre>mylabel : for(int i = 0 ; i< 3; i++) {\n  for (int j = 0; j < 4 ; j++) {\n    doSomething();\n    if (checkSomething()) {\n      continue mylabel;\n    }\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Bad Comparison","key":"pmd:BadComparison","plugin":"pmd","description":"Avoid equality comparisons with Double.NaN - these are likely to be logic errors.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Abstract class defines covariant compareTo() method","key":"findbugs:CO_ABSTRACT_SELF","plugin":"findbugs","description":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Abstract class defines covariant equals() method","key":"findbugs:EQ_ABSTRACT_SELF","plugin":"findbugs","description":"<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Certain swing methods needs to be invoked in Swing thread","key":"findbugs:SW_SWING_METHODS_INVOKED_IN_SWING_THREAD","plugin":"findbugs","description":"<p>(<a href=\"http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1\">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it's a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Check for sign of bitwise operation","key":"findbugs:BIT_SIGNED_CHECK","plugin":"findbugs","description":"<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class defines clone() but doesn't implement Cloneable","key":"findbugs:CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE","plugin":"findbugs","description":"<p> This class defines a clone() method but the class doesn't implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses \ncan clone themselves), but just make sure that this is what you intended.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class defines compareTo(...) and uses Object.equals()","key":"findbugs:EQ_COMPARETO_USE_OBJECT_EQUALS","plugin":"findbugs","description":"<p> This class defines a <code>compareTo(...)</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>.\n\tGenerally, the value of compareTo should return zero if and only if\n\tequals returns true. If this is violated, weird and unpredictable\n\tfailures will occur in classes such as PriorityQueue.\n\tIn Java 5 the PriorityQueue.remove method uses the compareTo method,\n\twhile in Java 6 it uses the equals method.\n\n<p>From the JavaDoc for the compareTo method in the Comparable interface:\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>. \nGenerally speaking, any class that implements the Comparable interface and violates this condition \nshould clearly indicate this fact. The recommended language \nis \"Note: this class has a natural ordering that is inconsistent with equals.\"\n</blockquote>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class defines equals() and uses Object.hashCode()","key":"findbugs:HE_EQUALS_USE_HASHCODE","plugin":"findbugs","description":"<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>, and inherits the implementation of\n  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre>public int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do \n  }</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class defines equals() but not hashCode()","key":"findbugs:HE_EQUALS_NO_HASHCODE","plugin":"findbugs","description":"<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the\n  invariant that equal objects must have equal hashcodes.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class defines hashCode() and uses Object.equals()","key":"findbugs:HE_HASHCODE_USE_OBJECT_EQUALS","plugin":"findbugs","description":"<p> This class defines a <code>hashCode()</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>\n  (which defines equality by comparing object references).&nbsp; Although\n  this will probably satisfy the contract that equal objects must have\n  equal hashcodes, it is probably not what was intended by overriding\n  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>\n  implies that the object's identity is based on criteria more complicated\n  than simple reference equality.)</p>\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<p><pre>public int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do \n  }</pre></p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class defines hashCode() but not equals()","key":"findbugs:HE_HASHCODE_NO_EQUALS","plugin":"findbugs","description":"<p> This class defines a <code>hashCode()</code> method but not an\n  <code>equals()</code> method.&nbsp; Therefore, the class may\n  violate the invariant that equal objects must have equal hashcodes.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class implements Cloneable but does not define or use clone method","key":"findbugs:CN_IDIOM","plugin":"findbugs","description":"<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class inherits equals() and uses Object.hashCode()","key":"findbugs:HE_INHERITS_EQUALS_USE_HASHCODE","plugin":"findbugs","description":"<p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don't want to define a hashCode method, and/or don't\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Class is Externalizable but doesn't define a void constructor","key":"findbugs:SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION","plugin":"findbugs","description":"<p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class is Serializable but its superclass doesn't define a void constructor","key":"findbugs:SE_NO_SUITABLE_CONSTRUCTOR","plugin":"findbugs","description":"<p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class is Serializable, but doesn't define serialVersionUID","key":"findbugs:SE_NO_SERIALVERSIONID","plugin":"findbugs","description":"<p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class is not derived from an Exception, even though it is named as such","key":"findbugs:NM_CLASS_NOT_EXCEPTION","plugin":"findbugs","description":"<p> This class is not derived from another exception, but ends with 'Exception'. This will\nbe confusing to users of this class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class names shouldn't shadow simple name of implemented interface","key":"findbugs:NM_SAME_SIMPLE_NAME_AS_INTERFACE","plugin":"findbugs","description":"<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Class names shouldn't shadow simple name of superclass","key":"findbugs:NM_SAME_SIMPLE_NAME_AS_SUPERCLASS","plugin":"findbugs","description":"<p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Classloaders should only be created inside doPrivileged block","key":"findbugs:DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED","plugin":"findbugs","description":"<p> This code creates a classloader,  which requires a security manager.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Clone method may return null","key":"findbugs:NP_CLONE_COULD_RETURN_NULL","plugin":"findbugs","description":"<p>\n\tThis clone method seems to return null in some circumstances, but clone is never\n\tallowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n\tinstead.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Comparator doesn't implement Serializable","key":"findbugs:SE_COMPARATOR_SHOULD_BE_SERIALIZABLE","plugin":"findbugs","description":"<p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Comparison of String objects using == or !=","key":"findbugs:ES_COMPARING_STRINGS_WITH_EQ","plugin":"findbugs","description":"<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Comparison of String parameter using == or !=","key":"findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ","plugin":"findbugs","description":"<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to \npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Confusing method names","key":"findbugs:NM_CONFUSING","plugin":"findbugs","description":"<p> The referenced methods have names that differ only by capitalization.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Covariant compareTo() method defined","key":"findbugs:CO_SELF_NO_OBJECT","plugin":"findbugs","description":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Covariant equals() method defined","key":"findbugs:EQ_SELF_NO_OBJECT","plugin":"findbugs","description":"<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Creates an empty jar file entry","key":"findbugs:AM_CREATES_EMPTY_JAR_FILE_ENTRY","plugin":"findbugs","description":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Creates an empty zip file entry","key":"findbugs:AM_CREATES_EMPTY_ZIP_FILE_ENTRY","plugin":"findbugs","description":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Dubious catching of IllegalMonitorStateException","key":"findbugs:IMSE_DONT_CATCH_IMSE","plugin":"findbugs","description":"<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Empty finalizer should be deleted","key":"findbugs:FI_EMPTY","plugin":"findbugs","description":"<p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Equals checks for noncompatible operand","key":"findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS","plugin":"findbugs","description":"<p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n\n<p><code><pre>\npublic boolean equals(Object o) {\n  if (o instanceof Foo)\n    return name.equals(((Foo)o).name);\n  else if (o instanceof String)\n    return name.equals(o);\n  else return false;\n</pre></code></p>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behavoirs are possible.\n</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Bad practice - Equals method should not assume anything about the type of its argument","key":"findbugs:BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS","plugin":"findbugs","description":"<p>\nThe <code>equals(Object o)</code> method shouldn't make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Explicit invocation of finalizer","key":"findbugs:FI_EXPLICIT_INVOCATION","plugin":"findbugs","description":"<p> This method contains an explicit invocation of the <code>finalize()</code>\n  method on an object.&nbsp; Because finalizer methods are supposed to be\n  executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the\nfinalize method on all the finalizable object, possibly at the same time in different threads.\nThus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize\non objects referenced by X, because they may already be getting finalized in a separate thread.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Fields of immutable classes should be final","key":"findbugs:JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS","plugin":"findbugs","description":"<p> The class is annotated with net.jcip.annotations.Immutable, and the rules for that annotation require\nthat all fields are final.\n   .</p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Bad practice - Finalizer does not call superclass finalizer","key":"findbugs:FI_MISSING_SUPER_CALL","plugin":"findbugs","description":"<p> This <code>finalize()</code> method does not make a call to its\n  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Finalizer does nothing but call superclass finalizer","key":"findbugs:FI_USELESS","plugin":"findbugs","description":"<p> The only thing this <code>finalize()</code> method does is call\n  the superclass's <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Bad practice - Finalizer nullifies superclass finalizer","key":"findbugs:FI_NULLIFY_SUPER","plugin":"findbugs","description":"<p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Finalizer nulls fields","key":"findbugs:FI_FINALIZER_NULLS_FIELDS","plugin":"findbugs","description":"<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Finalizer only nulls fields","key":"findbugs:FI_FINALIZER_ONLY_NULLS_FIELDS","plugin":"findbugs","description":"<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Iterator next() method can't throw NoSuchElementException","key":"findbugs:IT_NO_SUCH_ELEMENT","plugin":"findbugs","description":"<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Bad practice - Method doesn't override method in superclass due to wrong package for parameter","key":"findbugs:NM_WRONG_PACKAGE_INTENTIONAL","plugin":"findbugs","description":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n  public int f(alpha.Foo x) { return 27; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method ignores exceptional return value","key":"findbugs:RV_RETURN_VALUE_IGNORED_BAD_PRACTICE","plugin":"findbugs","description":"<p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than \nthrowing an Exception).\nIf you don't check the result, you won't notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Bad practice - Method ignores results of InputStream.read()","key":"findbugs:RR_NOT_CHECKED","plugin":"findbugs","description":"<p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method ignores results of InputStream.skip()","key":"findbugs:SR_NOT_CHECKED","plugin":"findbugs","description":"<p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method invoked that should be only be invoked inside a doPrivileged block","key":"findbugs:DP_DO_INSIDE_DO_PRIVILEGED","plugin":"findbugs","description":"<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method invokes System.exit(...)","key":"findbugs:DM_EXIT","plugin":"findbugs","description":"<p> Invoking System.exit shuts down the entire Java virtual machine. This\n   should only been done when it is appropriate. Such calls make it\n   hard or impossible for your code to be invoked by other code.\n   Consider throwing a RuntimeException instead.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method invokes dangerous method runFinalizersOnExit","key":"findbugs:DM_RUN_FINALIZERS_ON_EXIT","plugin":"findbugs","description":"<p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method may fail to close database resource","key":"findbugs:ODR_OPEN_DATABASE_RESOURCE","plugin":"findbugs","description":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Method may fail to close database resource on exception","key":"findbugs:ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH","plugin":"findbugs","description":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Method may fail to close stream","key":"findbugs:OS_OPEN_STREAM","plugin":"findbugs","description":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it, \nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Method may fail to close stream on exception","key":"findbugs:OS_OPEN_STREAM_EXCEPTION_PATH","plugin":"findbugs","description":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Method might drop exception","key":"findbugs:DE_MIGHT_DROP","plugin":"findbugs","description":"<p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method might ignore exception","key":"findbugs:DE_MIGHT_IGNORE","plugin":"findbugs","description":"<p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Method with Boolean return type returns explicit null","key":"findbugs:NP_BOOLEAN_RETURN_NULL","plugin":"findbugs","description":"<p>\n\tA method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n\tThis method can be invoked as though it returned a value of type boolean, and\n\tthe compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n\tthis will result in a NullPointerException.\n  \t </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Needless instantiation of class that only supplies static methods","key":"findbugs:ISC_INSTANTIATE_STATIC_CLASS","plugin":"findbugs","description":"<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Non-serializable class has a serializable inner class","key":"findbugs:SE_BAD_FIELD_INNER_CLASS","plugin":"findbugs","description":"<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the \nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Bad practice - Non-serializable value stored into instance field of a serializable class","key":"findbugs:SE_BAD_FIELD_STORE","plugin":"findbugs","description":"<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Random object created and used only once","key":"findbugs:DMI_RANDOM_USED_ONLY_ONCE","plugin":"findbugs","description":"<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient. \nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Serializable inner class","key":"findbugs:SE_INNER_CLASS","plugin":"findbugs","description":"<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won't fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the \nproblem.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Static initializer creates instance before all static final fields assigned","key":"findbugs:SI_INSTANCE_BEFORE_FINALS_ASSIGNED","plugin":"findbugs","description":"<p> The class's static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Store of non serializable object into HttpSession","key":"findbugs:J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION","plugin":"findbugs","description":"<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - Superclass uses subclass during initialization","key":"findbugs:IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION","plugin":"findbugs","description":"<p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n\n<pre>\npublic class CircularClassInitialization {\n\tstatic class InnerClassSingleton extends CircularClassInitialization {\n\t\tstatic InnerClassSingleton singleton = new InnerClassSingleton();\n\t}\n\t\n\tstatic CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Suspicious reference comparison","key":"findbugs:RC_REF_COMPARISON","plugin":"findbugs","description":"<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.  Examples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - The readResolve method must be declared with a return type of Object.","key":"findbugs:SE_READ_RESOLVE_MUST_RETURN_OBJECT","plugin":"findbugs","description":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Transient field that isn't set by deserialization.","key":"findbugs:SE_TRANSIENT_FIELD_NOT_RESTORED","plugin":"findbugs","description":"<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any \ndeserialized instance of the class.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Unchecked type in generic call","key":"findbugs:GC_UNCHECKED_TYPE_IN_GENERIC_CALL","plugin":"findbugs","description":"<p> This call to a generic collection method passes an argument\n\twhile compile type Object where a specific type from\n\tthe generic type parameters is expected.\n\tThus, neither the standard Java type system nor static analysis\n\tcan provide useful information on whether the\n\tobject being passed as a parameter is of an appropriate type.\n\t</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Bad practice - Usage of GetResource may be unsafe if class is extended","key":"findbugs:UI_INHERITANCE_UNSAFE_GETRESOURCE","plugin":"findbugs","description":"<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Use of identifier that is a keyword in later versions of Java","key":"findbugs:NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER","plugin":"findbugs","description":"<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Use of identifier that is a keyword in later versions of Java","key":"findbugs:NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER","plugin":"findbugs","description":"<p>This identifier is used as a keyword in later versions of Java. This code, and \nany code that references this API, \nwill need to be changed in order to compile it in later versions of Java.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - Very confusing method names (but perhaps intentional)","key":"findbugs:NM_VERY_CONFUSING_INTENTIONAL","plugin":"findbugs","description":"<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing. \nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - clone method does not call super.clone()","key":"findbugs:CN_IDIOM_NO_SUPER_CALL","plugin":"findbugs","description":"<p> This non-final class defines a clone() method that does not call super.clone().\nIf this class (\"<i>A</i>\") is extended by a subclass (\"<i>B</i>\"),\nand the subclass <i>B</i> calls super.clone(), then it is likely that\n<i>B</i>'s clone() method will return an object of type <i>A</i>,\nwhich violates the standard contract for clone().</p>\n\n<p> If all clone() methods call super.clone(), then they are guaranteed\nto use Object.clone(), which always returns an object of the correct type.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - equals method fails for subtypes","key":"findbugs:EQ_GETCLASS_AND_CLASS_CONSTANT","plugin":"findbugs","description":"<p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - equals() method does not check for null argument","key":"findbugs:NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT","plugin":"findbugs","description":"<p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - serialVersionUID isn't final","key":"findbugs:SE_NONFINAL_SERIALVERSIONID","plugin":"findbugs","description":"<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Bad practice - serialVersionUID isn't long","key":"findbugs:SE_NONLONG_SERIALVERSIONID","plugin":"findbugs","description":"<p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - serialVersionUID isn't static","key":"findbugs:SE_NONSTATIC_SERIALVERSIONID","plugin":"findbugs","description":"<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Bad practice - toString method may return null","key":"findbugs:NP_TOSTRING_COULD_RETURN_NULL","plugin":"findbugs","description":"<p>\n\tThis toString method seems to return null in some circumstances. A liberal reading of the\n\tspec could be interpreted as allowing this, but it is probably a bad idea and could cause\n\tother code to break. Return the empty string or some other appropriate string rather than null.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Basic - Empty Initializer","key":"pmd:EmptyInitializer","plugin":"pmd","description":"An empty initializer was found. Example :\n<pre>\npublic class Foo {\n\n   static {} // Why ?\n\n   {} // Again, why ?\n\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Bean Members Should Serialize","key":"pmd:BeanMembersShouldSerialize","plugin":"pmd","description":"If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e.if you have a variable foo, you should provide getFoo and setFoo methods.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"prefix","description":"A variable prefix to skip, i.e., m_"}]},
  {"title":"Big Integer Instantiation","key":"pmd:BigIntegerInstantiation","plugin":"pmd","description":"Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Boolean Expression Complexity","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck","plugin":"checkstyle","description":"Restricts nested boolean operators (&&, || and ^) to a specified depth (default = 3).","priority":"MAJOR","status":"ACTIVE","params":[{"name":"max","description":"the maximum allowed number of boolean operations in one expression. Default is 3.","value":"5"},{"name":"tokens","description":"tokens to check. Default is LAND,BAND,LOR,BOR,BXOR."}]},
  {"title":"Boolean Get Method Name","key":"pmd:BooleanGetMethodName","plugin":"pmd","description":"Looks for methods named \"getX()\" with \"boolean\" as the return type. The convention is to name these methods \"isX()\".","priority":"MAJOR","status":"INACTIVE","params":[{"name":"checkParameterizedMethods","description":"Check parameterized methods. Default is false."}]},
  {"title":"Boolean Instantiation","key":"pmd:BooleanInstantiation","plugin":"pmd","description":"Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Boolean Inversion","key":"pmd:BooleanInversion","plugin":"pmd","description":"Use bitwise inversion to invert boolean values - it's the fastest way to do this. See http://www.javaspecialists.co.za/archive/newsletter.do?issue=042&locale=en_US for specific details","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Broken Null Check","key":"pmd:BrokenNullCheck","plugin":"pmd","description":"The null check is broken since it will throw a Nullpointer itself. The reason is that a method is called on the object when it is null. It is likely that you used || instead of && or vice versa.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Call Super In Constructor","key":"pmd:CallSuperInConstructor","plugin":"pmd","description":"It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Check ResultSet","key":"pmd:CheckResultSet","plugin":"pmd","description":"Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet. Indeed, if the value return is \"false\", the developer should deal with it !","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Class Cast Exception With To Array","key":"pmd:ClassCastExceptionWithToArray","plugin":"pmd","description":"if you need to get an array of a class from your Collection, you should pass an array of the desidered class as the parameter of the toArray method. Otherwise you will get a ClassCastException.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Class Data Abstraction Coupling","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.ClassDataAbstractionCouplingCheck","plugin":"checkstyle","description":"This metric measures the number of instantiations of other classes within the given class.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"the maximum threshold allowed. Default is 7."}]},
  {"title":"Class Fan Out Complexity","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck","plugin":"checkstyle","description":"The number of other classes a given class relies on.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"the maximum threshold allowed. Default is 20."}]},
  {"title":"Class defines equal(Object); should it be equals(Object)?","key":"findbugs:NM_BAD_EQUAL","plugin":"findbugs","description":"<p>\n      This class defines a method <code>equal(Object)</code>.  \n      This method does not override the <code>equals(Object)</code> method \n      in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Class defines hashcode(); should it be hashCode()?","key":"findbugs:NM_LCASE_HASHCODE","plugin":"findbugs","description":"<p>\n      This class defines a method called <code>hashcode()</code>.  \n      This method does not override the <code>hashCode()</code> \n      method in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Class defines tostring(); should it be toString()?","key":"findbugs:NM_LCASE_TOSTRING","plugin":"findbugs","description":"<p>\n      This class defines a method called <code>tostring()</code>.  \n      This method does not override the <code>toString()</code> \n      method in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Class names should start with an upper case letter","key":"findbugs:NM_CLASS_NAMING_CONVENTION","plugin":"findbugs","description":"<p>\n      Class names should be nouns, in mixed case with the first letter of each internal word capitalized. \n      Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations \n      (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Class with only private constructors should be final","key":"pmd:ClassWithOnlyPrivateConstructorsShouldBeFinal","plugin":"pmd","description":"A class with only private constructors should be final, unless the private constructor is called by a inner class. Example :\n  <pre>\npublic class Foo {  //Should be final\n    private Foo() { }\n}\n  </pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Clone Throws Clone Not Supported Exception","key":"pmd:CloneThrowsCloneNotSupportedException","plugin":"pmd","description":"The method clone() should throw a CloneNotSupportedException.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Clone method must implement Cloneable","key":"pmd:CloneMethodMustImplementCloneable","plugin":"pmd","description":"The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. This version uses PMD's type resolution facilities, and can detect if the class implements or extends a Cloneable class","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Close Resource","key":"pmd:CloseResource","plugin":"pmd","description":"Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use. It does this by looking for code patterned like :\n<pre>\nConnection c = openConnection();\ntry {\n  // do stuff, and maybe catch something\n} finally {\n  c.close();\n}\n</pre>","priority":"MAJOR","status":"ACTIVE","params":[{"name":"types","description":"Resources to check. Default value is 'Connection,Statement,ResultSet',"},{"name":"closeTargets","description":"Methods which may close this resource. Default is 'close'."}]},
  {"title":"Code size - cyclomatic complexity","key":"pmd:CyclomaticComplexity","plugin":"pmd","description":"Complexity is determined by the number of decision points in a method plus one for the method entry. The decision points are 'if', 'while', 'for', and 'case labels'. Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity, and 11+ is very high complexity.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"reportLevel","description":"The Cyclomatic Complexity reporting threshold. Default is 10."},{"name":"showClassesComplexity","description":"Indicate if class average violation should be added to the report. Default is true."},{"name":"showMethodsComplexity","description":"Indicate if method average violation should be added to the report. Default is true."}]},
  {"title":"Collapsible If Statements","key":"pmd:CollapsibleIfStatements","plugin":"pmd","description":"Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Comment pattern matcher","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck","plugin":"checkstyle","description":"This rule allows to find any kind of pattern inside comments like TODO, NOPMD, ..., except NOSONAR","priority":"MINOR","status":"INACTIVE","params":[{"name":"format","description":"Regular expression pattern to check. Default is TODO:"}]},
  {"title":"Compare Objects With Equals","key":"pmd:CompareObjectsWithEquals","plugin":"pmd","description":"Use equals() to compare object references; avoid comparing them with ==.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Confusing Ternary","key":"pmd:ConfusingTernary","plugin":"pmd","description":"In an if expression with an else clause, avoid negation in the test. For example, rephrase: if (x != y) diff(); else same(); as: if (x == y) same(); else diff(); Most if (x != y) cases without an else are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as does the error case go first? or does the common case go first?.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Consecutive Literal Appends","key":"pmd:ConsecutiveLiteralAppends","plugin":"pmd","description":"Consecutively calling StringBuffer.append with String literals","priority":"MINOR","status":"INACTIVE","params":[{"name":"threshold","description":"The report threshold. Default is 1."}]},
  {"title":"Constant Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck","plugin":"checkstyle","description":"Checks that constant names conform to a format specified by the format property.","priority":"MINOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for constants (static,  final fields). Default is ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}]},
  {"title":"Constructor Calls Overridable Method","key":"pmd:ConstructorCallsOverridableMethod","plugin":"pmd","description":"Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object \n      and can be difficult to discern. It may leave the sub-class unable to construct its superclass or forced to replicate \n      the construction process completely within itself, losing the ability to call super(). \n      If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. \n      Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls \n      a private method bar() that calls a public method buz(), this denotes a problem. \n      <br/>Example :\n<pre>\npublic class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return \"IAmSeniorClass\";\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name = \"JuniorClass\";\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}\n</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - \".\" used for regular expression","key":"findbugs:RE_POSSIBLE_UNINTENDED_PATTERN","plugin":"findbugs","description":"<p>\nA String function is being invoked and \".\" is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\ns.replaceAll(\".\", \"/\") will return a String in which <em>every</em>\ncharacter has been replaced by a / character.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - A collection is added to itself","key":"findbugs:IL_CONTAINER_ADDED_TO_ITSELF","plugin":"findbugs","description":"<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - A known null value is checked to see if it is an instance of a type","key":"findbugs:NP_NULL_INSTANCEOF","plugin":"findbugs","description":"<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - A parameter is dead upon entry to a method but overwritten","key":"findbugs:IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN","plugin":"findbugs","description":"<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - An apparent infinite loop","key":"findbugs:IL_INFINITE_LOOP","plugin":"findbugs","description":"<p>This loop doesn't seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - An apparent infinite recursive loop","key":"findbugs:IL_INFINITE_RECURSIVE_LOOP","plugin":"findbugs","description":"<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Apparent method/constructor confusion","key":"findbugs:NM_METHOD_CONSTRUCTOR_CONFUSION","plugin":"findbugs","description":"<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n\tIf you had accidently defined this method, realized the mistake, defined a proper constructor\n\tbut can't get rid of this method due to backwards compatibility, deprecate the method.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Array formatted in useless way using format string","key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY","plugin":"findbugs","description":"<p>\nOne of the arguments being formatted with a format string is an array. This will be formatted\nusing a fairly useless format, such as [I@304282, which doesn't actually show the contents\nof the array.\nConsider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.\n</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode","key":"findbugs:RV_ABSOLUTE_VALUE_OF_HASHCODE","plugin":"findbugs","description":"<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode \nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bad attempt to compute absolute value of signed 32-bit random integer","key":"findbugs:RV_ABSOLUTE_VALUE_OF_RANDOM_INT","plugin":"findbugs","description":"<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bad comparison of nonnegative value with negative constant","key":"findbugs:INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE","plugin":"findbugs","description":"<p> This code compares a value that is guaranteed to be non-negative with a negative constant.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bad comparison of signed byte","key":"findbugs:INT_BAD_COMPARISON_WITH_SIGNED_BYTE","plugin":"findbugs","description":"<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bad constant value for month","key":"findbugs:DMI_BAD_MONTH","plugin":"findbugs","description":"<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bitwise OR of signed byte value","key":"findbugs:BIT_IOR_OF_SIGNED_BYTE","plugin":"findbugs","description":"<p> Loads a value from a byte array and performs a bitwise OR with\nthat value. Values loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Bitwise add of signed byte value","key":"findbugs:BIT_ADD_OF_SIGNED_BYTE","plugin":"findbugs","description":"<p> Adds a byte value and a value which is known to the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</pre>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Call to equals() comparing different interface types","key":"findbugs:EC_UNRELATED_INTERFACES","plugin":"findbugs","description":"<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Call to equals() comparing different types","key":"findbugs:EC_UNRELATED_TYPES","plugin":"findbugs","description":"<p> This method calls equals(Object) on two references of different\nclass types with no common subclasses.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Call to equals() comparing unrelated class and interface","key":"findbugs:EC_UNRELATED_CLASS_AND_INTERFACE","plugin":"findbugs","description":"<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Call to equals() with null argument","key":"findbugs:EC_NULL_ARG","plugin":"findbugs","description":"<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Can't use reflection to check for presence of annotation without runtime retention","key":"findbugs:DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION","plugin":"findbugs","description":"<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Check for sign of bitwise operation","key":"findbugs:BIT_SIGNED_CHECK_HIGH_BIT","plugin":"findbugs","description":"<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Check to see if ((...) & 0) == 0","key":"findbugs:BIT_AND_ZZ","plugin":"findbugs","description":"<p> This method compares an expression of the form (e &amp; 0) to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Class defines field that masks a superclass field","key":"findbugs:MF_CLASS_MASKS_FIELD","plugin":"findbugs","description":"<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Class overrides a method implemented in super class Adapter wrongly","key":"findbugs:BOA_BADLY_OVERRIDDEN_ADAPTER","plugin":"findbugs","description":"<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Collections should not contain themselves","key":"findbugs:DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES","plugin":"findbugs","description":"<p> This call to a generic collection's method would only make sense if a collection contained \nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n\t</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Covariant equals() method defined for enum","key":"findbugs:EQ_DONT_DEFINE_EQUALS_FOR_ENUM","plugin":"findbugs","description":"<p> This class defines an enumeration, and equality on enumerations are defined\nusing object identity. Defining a covariant equals method for an enumeration\nvalue is exceptionally bad practice, since it would likely result\nin having two different enumeration values that compare as equals using\nthe covariant enum method, and as not equal when compared normally.\nDon't do it.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Covariant equals() method defined, Object.equals(Object) inherited","key":"findbugs:EQ_SELF_USE_OBJECT","plugin":"findbugs","description":"<p> This class defines a covariant version of the <code>equals()</code>\n  method, but inherits the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads","key":"findbugs:DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS","plugin":"findbugs","description":"<p>(<a href=\"http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int)\">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Correctness - Dead store of class literal","key":"findbugs:DLS_DEAD_STORE_OF_CLASS_LITERAL","plugin":"findbugs","description":"<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href=\"//java.sun.com/j2se/1.5.0/compatibility.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun's <a href=\"//java.sun.com/j2se/1.5.0/compatibility.html#literal\">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Deadly embrace of non-static inner class and thread local","key":"findbugs:SIC_THREADLOCAL_DEADLY_EMBRACE","plugin":"findbugs","description":"This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn't static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Don't use removeAll to clear a collection","key":"findbugs:DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION","plugin":"findbugs","description":"<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>.\n\t</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Doomed attempt to append to an object output stream","key":"findbugs:IO_APPENDING_TO_OBJECT_OUTPUT_STREAM","plugin":"findbugs","description":"<p>\n     This code opens a file in append mode and then wraps the result in an object output stream. \n     This won't allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p> \n      \n      <p>\n      TODO: example.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Doomed test for equality to NaN","key":"findbugs:FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER","plugin":"findbugs","description":"<p>\n    This code checks to see if a floating point value is equal to the special\n\tNot A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n\tbecause of the special semantics of <code>NaN</code>, no value\n\tis equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n\t<code>x == Double.NaN</code> always evaluates to false.\n\n\tTo check to see if a value contained in <code>x</code>\n\tis the special Not A Number value, use \n\t<code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n\t<code>x</code> is floating point precision).\n    </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Double assignment of field","key":"findbugs:SA_FIELD_DOUBLE_ASSIGNMENT","plugin":"findbugs","description":"<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre>\n  int x,y;\n  public void foo() {\n    x = x = 17;\n  }\n</pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Double.longBitsToDouble invoked on an int","key":"findbugs:DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT","plugin":"findbugs","description":"<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n\tas an argument. This almostly certainly is not intended and is unlikely \n\tto give the intended result.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Exception created and dropped rather than thrown","key":"findbugs:RV_EXCEPTION_NOT_THROWN","plugin":"findbugs","description":"<p> This code creates an exception (or error) object, but doesn't do anything with it. For example,\nsomething like </p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Explicit annotation inconsistent with use","key":"findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK","plugin":"findbugs","description":"<p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n\tthere is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n\tEither the usage or the annotation is incorrect.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Explicit annotation inconsistent with use","key":"findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK","plugin":"findbugs","description":"<p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n\tthere is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n\tEither the usage or the annotation is incorrect.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Field not initialized in constructor","key":"findbugs:UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR","plugin":"findbugs","description":"<p>This field is never initialized within any constructor, and is therefore could be null after the object is constructed. This could be a either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Correctness - Field only ever set to null","key":"findbugs:UWF_NULL_FIELD","plugin":"findbugs","description":"<p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - File.separator used for regular expression","key":"findbugs:RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION","plugin":"findbugs","description":"<p>\nThe code here uses <code>File.separator</code> \nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Amoung other options, you can just use\n<code>File.separatorChar=='\\\\' &amp; \"\\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Format string placeholder incompatible with passed argument","key":"findbugs:VA_FORMAT_STRING_BAD_ARGUMENT","plugin":"findbugs","description":"<p>\nThe format string placeholder is incompatible with the corresponding\nargument. For example,\n<code>\n  System.out.println(\"%d\\n\", \"hello\");\n</code>\n<p>The %d placeholder requires a numeric argument, but a string value is\npassed instead. \nA runtime exception will occur when \nthis statement is executed.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Format string references missing argument","key":"findbugs:VA_FORMAT_STRING_MISSING_ARGUMENT","plugin":"findbugs","description":"<p>\nNot enough arguments are passed to satisfy a placeholder in the format string.\nA runtime exception will occur when \nthis statement is executed.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor","key":"findbugs:DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR","plugin":"findbugs","description":"<p>(<a href=\"http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n\t</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Correctness - Illegal format string","key":"findbugs:VA_FORMAT_STRING_ILLEGAL","plugin":"findbugs","description":"<p>\nThe format string is syntactically invalid, \nand a runtime exception will occur when \nthis statement is executed.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Impossible cast","key":"findbugs:BC_IMPOSSIBLE_CAST","plugin":"findbugs","description":"<p>\nThis cast will always throw a ClassCastException.\n</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - Impossible downcast","key":"findbugs:BC_IMPOSSIBLE_DOWNCAST","plugin":"findbugs","description":"This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.","priority":"BLOCKER","status":"INACTIVE"},
  {"title":"Correctness - Impossible downcast of toArray() result","key":"findbugs:BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY","plugin":"findbugs","description":"<p>This code is casting the result of calling toArray() on a collection to a type more specific than Object[], as in:</p>\n<pre>\n  String[] getAsArray(Collection<String> c) {\n    return (String[]) c.toArray();\n  }\n</pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code> of almost all collections return an <code>Object[]</code>. They can't really do anything else, since the Collection object has no reference to the declared generic type of the collection.</p>\n<p>The correct way to do get an array of a specific type from a collection is to use <code>c.toArray(new String[]);</code> or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).</p>\n<p>There is one common/known exception exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, <code>Arrays.asArray(new String[] { \"a\" }).toArray()</code> will return a String []. FindBugs attempts to detect and suppress such cases, but may miss some.</p>","priority":"BLOCKER","status":"INACTIVE"},
  {"title":"Correctness - Incompatible bit masks","key":"findbugs:BIT_AND","plugin":"findbugs","description":"<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Incompatible bit masks","key":"findbugs:BIT_IOR","plugin":"findbugs","description":"<p> This method compares an expression of the form (e | C) to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator (\"|\") instead of bitwise AND (\"&amp;\").</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Integer multiply of result of integer remainder","key":"findbugs:IM_MULTIPLYING_RESULT_OF_IREM","plugin":"findbugs","description":"<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don't have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Integer remainder modulo 1","key":"findbugs:INT_BAD_REM_BY_1","plugin":"findbugs","description":"<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Integer shift by an amount not in the range 0..31","key":"findbugs:ICAST_BAD_SHIFT_AMOUNT","plugin":"findbugs","description":"<p>\nThe code performs an integer shift by a constant amount outside\nthe range 0..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by. This probably isn't want was expected,\nand it at least confusing.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Invalid syntax for regular expression","key":"findbugs:RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION","plugin":"findbugs","description":"<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Invocation of equals() on an array, which is equivalent to ==","key":"findbugs:EC_BAD_ARRAY_COMPARE","plugin":"findbugs","description":"<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Invocation of hashCode on an array","key":"findbugs:DMI_INVOKING_HASHCODE_ON_ARRAY","plugin":"findbugs","description":"<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ingores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>, \nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Invocation of toString on an array","key":"findbugs:DMI_INVOKING_TOSTRING_ON_ARRAY","plugin":"findbugs","description":"<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Invocation of toString on an array","key":"findbugs:DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY","plugin":"findbugs","description":"<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - JUnit assertion in run method will not be noticed by JUnit","key":"findbugs:IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD","plugin":"findbugs","description":"<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - MessageFormat supplied where printf style format expected","key":"findbugs:VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED","plugin":"findbugs","description":"A method is called that expects a Java printf format string and a list of arguments. However, the format string doesn't contain any format specifiers (e.g., %s) but does contain message format elements (e.g., {0}). It is likely that the code is supplying a MessageFormat string when a printf-style format string is required. At runtime, all of the arguments will be ignored and the format string will be returned exactly as provided without any formatting.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Method assigns boolean literal in boolean expression","key":"findbugs:QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT","plugin":"findbugs","description":"<p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using \n      ==, not an assignment using =.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method attempts to access a prepared statement parameter with index 0","key":"findbugs:SQL_BAD_PREPARED_STATEMENT_ACCESS","plugin":"findbugs","description":"<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method attempts to access a result set field with index 0","key":"findbugs:SQL_BAD_RESULTSET_ACCESS","plugin":"findbugs","description":"<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method call passes null for nonnull parameter","key":"findbugs:NP_NULL_PARAM_DEREF","plugin":"findbugs","description":"<p>\n      This method call passes a null value for a nonnull method parameter.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method call passes null for nonnull parameter","key":"findbugs:NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS","plugin":"findbugs","description":"<p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be nonnull.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method call passes null to a nonnull parameter","key":"findbugs:NP_NONNULL_PARAM_VIOLATION","plugin":"findbugs","description":"<p>\n      This method passes a null value as the parameter of a method which\n\tmust be nonnull. Either this parameter has been explicitly marked\n\tas @Nonnull, or analysis has determined that this parameter is\n\talways dereferenced.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method defines a variable that obscures a field","key":"findbugs:MF_METHOD_MASKS_FIELD","plugin":"findbugs","description":"<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Method does not check for null argument","key":"findbugs:NP_ARGUMENT_MIGHT_BE_NULL","plugin":"findbugs","description":"<p>\n\tA parameter to this method has been identified as a value that should\n\talways be checked to see whether or not it is null, but it is being dereferenced\n\twithout a preceding null check.\n      </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Method doesn't override method in superclass due to wrong package for parameter","key":"findbugs:NM_WRONG_PACKAGE","plugin":"findbugs","description":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Method ignores return value","key":"findbugs:RV_RETURN_VALUE_IGNORED","plugin":"findbugs","description":"<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Correctness - Method ignores return value","key":"findbugs:RV_RETURN_VALUE_IGNORED2","plugin":"findbugs","description":"<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Method may return null, but is declared @NonNull","key":"findbugs:NP_NONNULL_RETURN_VIOLATION","plugin":"findbugs","description":"<p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @NonNull.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Method must be private in order for serialization to work","key":"findbugs:SE_METHOD_MUST_BE_PRIVATE","plugin":"findbugs","description":"<p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn't declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Method performs math using floating point precision","key":"findbugs:FL_MATH_USING_FLOAT_PRECISION","plugin":"findbugs","description":"<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - More arguments are passed that are actually used in the format string","key":"findbugs:VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED","plugin":"findbugs","description":"<p>\nA format-string method with a variable number of arguments is called,\nbut more arguments are passed than are actually used by the format string.\nThis won't cause a runtime exception, but the code may be silently omitting \ninformation that was intended to be included in the formatted string.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - No previous argument for format string","key":"findbugs:VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT","plugin":"findbugs","description":"<p>\nThe format string specifies a relative index to request that the argument for the previous format specifier\nbe reused. However, there is no previous argument.\nFor example, \n</p>\n<p><code>formatter.format(\"%&lt;s %s\", \"a\", \"b\")</code>\n</p>\n<p>would throw a MissingFormatArgumentException when executed.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - No relationship between generic parameter and method argument","key":"findbugs:GC_UNRELATED_TYPES","plugin":"findbugs","description":"<p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection's parameter\n\t(i.e., the type of the argument is neither a supertype nor a subtype \n\t\tof the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects \n\tthat are equal to the method argument used here.\n\tMost likely, the wrong value is being passed to the method.</p>\n\t<p>In general, instances of two unrelated classes are not equal. \n\tFor example, if the <code>Foo</code> and <code>Bar</code> classes\n\tare not related by subtyping, then an instance of <code>Foo</code>\n\t\tshould not be equal to an instance of <code>Bar</code>.\n\tAmong other issues, doing so will likely result in an equals method\n\tthat is not symmetrical. For example, if you define the <code>Foo</code> class\n\tso that a <code>Foo</code> can be equal to a <code>String</code>,\n\tyour equals method isn't symmetrical since a <code>String</code> can only be equal\n\tto a <code>String</code>.\n\t</p>\n\t<p>In rare cases, people do define nonsymmetrical equals methods and still manage to make \n\ttheir code work. Although none of the APIs document or guarantee it, it is typically\n\tthe case that if you check if a <code>Collection&lt;String&gt;</code> contains\n\ta <code>Foo</code>, the equals method of argument (e.g., the equals method of the \n\t<code>Foo</code> class) used to perform the equality checks.\n\t</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Non-virtual method call passes null for nonnull parameter","key":"findbugs:NP_NULL_PARAM_DEREF_NONVIRTUAL","plugin":"findbugs","description":"<p>\n      A possibly-null value is passed to a nonnull method parameter.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Nonsensical self computation involving a field (e.g., x & x)","key":"findbugs:SA_FIELD_SELF_COMPUTATION","plugin":"findbugs","description":"<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Nonsensical self computation involving a variable (e.g., x & x)","key":"findbugs:SA_LOCAL_SELF_COMPUTATION","plugin":"findbugs","description":"<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Null pointer dereference","key":"findbugs:NP_ALWAYS_NULL","plugin":"findbugs","description":"<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Null pointer dereference in method on exception path","key":"findbugs:NP_ALWAYS_NULL_EXCEPTION","plugin":"findbugs","description":"<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Null value is guaranteed to be dereferenced","key":"findbugs:NP_GUARANTEED_DEREF","plugin":"findbugs","description":"<p>\n\t\t\t  There is a statement or branch that if executed guarantees that\n\t\t\t  a value is null at this point, and that \n\t\t\t  value that is guaranteed to be dereferenced\n\t\t\t  (except on forward paths involving runtime exceptions).\n\t\t\t  </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - Nullcheck of value previously dereferenced","key":"findbugs:RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE","plugin":"findbugs","description":"<p> A value is checked here to see whether it is null, but this value can't\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference. \nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Number of format-string arguments does not correspond to number of placeholders","key":"findbugs:VA_FORMAT_STRING_ARG_MISMATCH","plugin":"findbugs","description":"<p>\nA format-string method with a variable number of arguments is called,\nbut the number of arguments passed does not match with the number of\n% placeholders in the format string.  This is probably not what the\nauthor intended.\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Overwritten increment","key":"findbugs:DLS_OVERWRITTEN_INCREMENT","plugin":"findbugs","description":"<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Possible null pointer dereference","key":"findbugs:NP_NULL_ON_SOME_PATH","plugin":"findbugs","description":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Possible null pointer dereference in method on exception path","key":"findbugs:NP_NULL_ON_SOME_PATH_EXCEPTION","plugin":"findbugs","description":"<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Potential lost logger changes due to weak reference in OpenJDK","key":"findbugs:LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE","plugin":"findbugs","description":"<p>OpenJDK introduces a potential incompatibility. In particular, the java.util.logging.Logger behavior has changed. Instead of using strong references, it now uses weak references internally. That's a reasonable change, but unfortunately some code relies on the old behavior - when changing logger configuration, it simply drops the logger reference. That means that the garbage collector is free to reclaim that memory, which means that the logger configuration is lost. For example, consider:</p>\n</pre>\n  public static void initLogging() throws Exception {\n    Logger logger = Logger.getLogger(\"edu.umd.cs\");\n    logger.addHandler(new FileHandler()); // call to change logger configuration\n    logger.setUseParentHandlers(false); // another call to change logger configuration\n  }\n</pre>\n<p>The logger reference is lost at the end of the method (it doesn't escape the method), so if you have a garbage collection cycle just after the call to initLogging, the logger configuration is lost (because Logger only keeps weak references).</p>\n<pre>\n  public static void main(String[] args) throws Exception {\n    initLogging(); // adds a file handler to the logger\n    System.gc(); // logger configuration lost\n    Logger.getLogger(\"edu.umd.cs\").info(\"Some message\"); // this isn't logged to the file as expected\n  }\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Primitive array passed to function expecting a variable number of object arguments","key":"findbugs:VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG","plugin":"findbugs","description":"<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Primitive value is unboxed and coerced for ternary operator","key":"findbugs:BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR","plugin":"findbugs","description":"<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code> \nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Random value from 0 to 1 is coerced to the integer 0","key":"findbugs:RV_01_TO_INT","plugin":"findbugs","description":"<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiple the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Read of unwritten field","key":"findbugs:NP_UNWRITTEN_FIELD","plugin":"findbugs","description":"<p>The program is dereferencing a field that does not seem to ever have a non-null value written to it. Dereferencing this value will generate a null pointer exception.</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - Repeated conditional tests","key":"findbugs:RpC_REPEATED_CONDITIONAL_TEST","plugin":"findbugs","description":"<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>). \n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Return value of putIfAbsent ignored, value passed to putIfAbsent reused","key":"findbugs:RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED","plugin":"findbugs","description":"The putIfAbsent method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn't stored in the map, your program will behave incorrectly.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Self assignment of field","key":"findbugs:SA_FIELD_SELF_ASSIGNMENT","plugin":"findbugs","description":"<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre>\n  int x;\n  public void foo() {\n    x = x;\n  }\n</pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Self comparison of field with itself","key":"findbugs:SA_FIELD_SELF_COMPARISON","plugin":"findbugs","description":"<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Self comparison of value with itself","key":"findbugs:SA_LOCAL_SELF_COMPARISON","plugin":"findbugs","description":"<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Signature declares use of unhashable class in hashed construct","key":"findbugs:HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS","plugin":"findbugs","description":"<p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn't fulfill the requirement that\nequal objects have equal hashCodes.\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Static Thread.interrupted() method invoked on thread instance","key":"findbugs:STI_INTERRUPTED_ON_UNKNOWNTHREAD","plugin":"findbugs","description":"<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Store of null value into field annotated NonNull","key":"findbugs:NP_STORE_INTO_NONNULL_FIELD","plugin":"findbugs","description":"<p> A value that could be null is stored into a field that has been annotated as NonNull. </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Suspicious reference comparison of Boolean values","key":"findbugs:RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN","plugin":"findbugs","description":"This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the new Boolean(b) constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using .equals(...)","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Suspicious reference comparison to constant","key":"findbugs:RC_REF_COMPARISON_BAD_PRACTICE","plugin":"findbugs","description":"This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - TestCase declares a bad suite method","key":"findbugs:IJU_BAD_SUITE_METHOD","plugin":"findbugs","description":"<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either\n<pre>public static junit.framework.Test suite()</pre>\nor \n<pre>public static junit.framework.TestSuite suite()</pre>\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - TestCase defines setUp that doesn't call super.setUp()","key":"findbugs:IJU_SETUP_NO_SUPER","plugin":"findbugs","description":"<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn't.</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - TestCase defines tearDown that doesn't call super.tearDown()","key":"findbugs:IJU_TEARDOWN_NO_SUPER","plugin":"findbugs","description":"<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn't.</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - TestCase has no tests","key":"findbugs:IJU_NO_TESTS","plugin":"findbugs","description":"<p> Class is a JUnit TestCase but has not implemented any test methods</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - TestCase implements a non-static suite method","key":"findbugs:IJU_SUITE_NOT_STATIC","plugin":"findbugs","description":"<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn't.</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - The readResolve method must not be declared as a static method.","key":"findbugs:SE_READ_RESOLVE_IS_STATIC","plugin":"findbugs","description":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - The type of a supplied argument doesn't match format specifier","key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION","plugin":"findbugs","description":"<p>\nOne of the arguments is uncompatible with the corresponding format string specifier.\nAs a result, this will generate a runtime exception when executed.\nFor example, <code>String.format(\"%d\", \"1\")</code> will generate an exception, since\nthe String \"1\" is incompatible with the format specifier %d.\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Uncallable method defined in anonymous class","key":"findbugs:UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS","plugin":"findbugs","description":"<p> This anonymous class defined a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to an typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Uninitialized read of field in constructor","key":"findbugs:UR_UNINIT_READ","plugin":"findbugs","description":"<p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor's parameters.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - Uninitialized read of field method called from constructor of superclass","key":"findbugs:UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR","plugin":"findbugs","description":"<p>This method is invoked in the constructor of of the superclass. At this point, the fields of the class have not yet initialized. To make this more concrete, consider the following classes:</p>\n<pre>\n  abstract class A {\n    int hashCode;\n    abstract Object getValue();\n    A() {\n      hashCode = getValue().hashCode();\n    }\n  }\n  class B extends A {\n    Object value;\n    B(Object v) {\n      this.value = v;\n    }\n    Object getValue() {\n      return value;\n    }\n  }\n</pre>\n<p>When a B is constructed, the constructor for the A class is invoked before the constructor for B sets value. Thus, when the constructor for A invokes getValue, an uninitialized value is read for value.</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Correctness - Unnecessary type check done using instanceof operator","key":"findbugs:SIO_SUPERFLUOUS_INSTANCEOF","plugin":"findbugs","description":"<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Unneeded use of currentThread() call, to call interrupted()","key":"findbugs:STI_INTERRUPTED_ON_CURRENTTHREAD","plugin":"findbugs","description":"<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Unwritten field","key":"findbugs:UWF_UNWRITTEN_FIELD","plugin":"findbugs","description":"<p>This field is never written.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - Use of class without a hashCode() method in a hashed data structure","key":"findbugs:HE_USE_OF_UNHASHABLE_CLASS","plugin":"findbugs","description":"<p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn't fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Useless assignment in return statement","key":"findbugs:DLS_DEAD_LOCAL_STORE_IN_RETURN","plugin":"findbugs","description":"<p>\nThis statement assigns to a local variable in a return statement. This assignment \nhas effect. Please verify that this statement does the right thing.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Useless control flow to next line","key":"findbugs:UCF_USELESS_CONTROL_FLOW_NEXT_LINE","plugin":"findbugs","description":"<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre>\n    if (argv.length == 1);\n        System.out.println(\"Hello, \" + argv[0]);\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Using pointer equality to compare different types","key":"findbugs:EC_UNRELATED_TYPES_USING_POINTER_EQUALITY","plugin":"findbugs","description":"<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Vacuous call to collections","key":"findbugs:DMI_VACUOUS_SELF_COLLECTION_CALL","plugin":"findbugs","description":"<p> This call doesn't make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n\t</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required","key":"findbugs:TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED","plugin":"findbugs","description":"<p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n        \n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.   \n        </p>\n        <blockquote>\n<pre>\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</pre>\n        </blockquote>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required","key":"findbugs:TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED","plugin":"findbugs","description":"<p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Value is null and guaranteed to be dereferenced on exception path","key":"findbugs:NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH","plugin":"findbugs","description":"<p>\n\t\t\t  There is a statement or branch on an exception path\n\t\t\t\tthat if executed guarantees that\n\t\t\t  a value is null at this point, and that \n\t\t\t  value that is guaranteed to be dereferenced\n\t\t\t  (except on forward paths involving runtime exceptions).\n\t\t\t  </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier","key":"findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK","plugin":"findbugs","description":"<p>\n      A value that is annotated as possibility being an instance of\n\tthe values denoted by the type qualifier, and the value is guaranteed to be used\n\tin a way that prohibits values denoted by that type qualifier.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier","key":"findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK","plugin":"findbugs","description":"<p>\n      A value that is annotated as possibility not being an instance of\n\tthe values denoted by the type qualifier, and the value is guaranteed to be used\n\tin a way that requires values denoted by that type qualifier.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - Very confusing method names","key":"findbugs:NM_VERY_CONFUSING","plugin":"findbugs","description":"<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - close() invoked on a value that is always null","key":"findbugs:NP_CLOSING_NULL","plugin":"findbugs","description":"close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - equals method always returns false","key":"findbugs:EQ_ALWAYS_FALSE","plugin":"findbugs","description":"<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different \nsuperclass, you can use use:\n<pre>\npublic boolean equals(Object o) { return this == o; }\n</pre>\n</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - equals method always returns true","key":"findbugs:EQ_ALWAYS_TRUE","plugin":"findbugs","description":"<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Correctness - equals method compares class names rather than class objects","key":"findbugs:EQ_COMPARING_CLASS_NAMES","plugin":"findbugs","description":"<p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - equals method overrides equals in superclass and may not be symmetric","key":"findbugs:EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC","plugin":"findbugs","description":"<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - equals() method defined that doesn't override Object.equals(Object)","key":"findbugs:EQ_OTHER_USE_OBJECT","plugin":"findbugs","description":"<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - equals() method defined that doesn't override equals(Object)","key":"findbugs:EQ_OTHER_NO_OBJECT","plugin":"findbugs","description":"<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it \n  inherits an <code>equals(Object)</code> method from a superclass.\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Correctness - equals() used to compare array and nonarray","key":"findbugs:EC_ARRAY_AND_NONARRAY","plugin":"findbugs","description":"<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn't seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - equals(...) used to compare incompatible arrays","key":"findbugs:EC_INCOMPATIBLE_ARRAY_COMPARE","plugin":"findbugs","description":"This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(...) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.","priority":"BLOCKER","status":"INACTIVE"},
  {"title":"Correctness - hasNext method invokes next","key":"findbugs:DMI_CALLING_NEXT_FROM_HASNEXT","plugin":"findbugs","description":"<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - instanceof will always return false","key":"findbugs:BC_IMPOSSIBLE_INSTANCEOF","plugin":"findbugs","description":"<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - int value cast to double and then passed to Math.ceil","key":"findbugs:ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL","plugin":"findbugs","description":"<p>\nThis code converts an int value to a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Correctness - int value cast to float and then passed to Math.round","key":"findbugs:ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND","plugin":"findbugs","description":"<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using \nfloating point arithmetic.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Coupling - excessive imports","key":"pmd:ExcessiveImports","plugin":"pmd","description":"A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The import count reporting threshold. Default is 30."}]},
  {"title":"Coupling between objects","key":"pmd:CouplingBetweenObjects","plugin":"pmd","description":"This rule counts unique attributes, local variables and return types within an object. A number higher than specified threshold can indicate a high degree of coupling.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"threshold","description":"The unique type reporting threshold. Default is 20."}]},
  {"title":"Covariant Equals","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck","plugin":"checkstyle","description":"Checks that if a class defines a covariant method equals, then it defines method equals(java.lang.Object).","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Cyclomatic Complexity","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck","plugin":"checkstyle","description":"Checks cyclomatic complexity of methods against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case  statements, and operators && and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now !","priority":"MAJOR","status":"ACTIVE","params":[{"name":"max","description":"the maximum threshold allowed. Default is 10.","value":"10"}]},
  {"title":"Dataflow Anomaly Analysis","key":"pmd:DataflowAnomalyAnalysis","plugin":"pmd","description":"The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow. From those informations there can be found various problems. 1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error. 2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text. 3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"maxviolations","description":"The maximum number of violations per class. Default is 100."},{"name":"maxpaths","description":"The maximum number of checked paths per method. A lower value will increase the performance of the rule but may decrease the number of found anomalies. Default is 1000."}]},
  {"title":"Dead store due to switch statement fall through","key":"findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH","plugin":"findbugs","description":"<p>\n      A value stored in the previous switch case is overwritten here due \n      to a switch fall through. It is likely that you forgot to put a \n      break or return at the end of the previous case.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Dead store due to switch statement fall through to throw","key":"findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW","plugin":"findbugs","description":"<p>\n      A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. \n      It is likely that you forgot to put a break or return at the end of the previous case.\n      </p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Declaration Order","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck","plugin":"checkstyle","description":"Checks that the parts of a class or interface declaration appear in the order suggested by the Code Convention for the Java Programming Language : <ul><li>Class (static) variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Instance variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Constructors</li><li>Methods</li></ul>","priority":"INFO","status":"INACTIVE"},
  {"title":"Default Comes Last","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck","plugin":"checkstyle","description":"Check that the default is after all the cases in a switch statement.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Default Package","key":"pmd:DefaultPackage","plugin":"pmd","description":"Use explicit scoping instead of the default package private level.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Default label not last in switch statement","key":"pmd:DefaultLabelNotLastInSwitchStmt","plugin":"pmd","description":"Switch statements should have a default label. Example :\n  <pre>\npublic class Foo {\n void bar(int a) {\n  switch (a) {\n   case 1:  // do something\n      break;\n   default:  // the default case should be last, by convention\n      break;\n   case 2:\n      break;\n  }\n }\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Design For Extension","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck","plugin":"checkstyle","description":"Checks that classes are designed for inheritance.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Do Not Call System Exit","key":"pmd:DoNotCallSystemExit","plugin":"pmd","description":"Web applications should not call System.exit(), since only the web container or the application server should stop the JVM.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Do Not Extend Java Lang Error","key":"pmd:DoNotExtendJavaLangError","plugin":"pmd","description":"Errors are system exceptions. Do not extend them.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Do Not Use Threads","key":"pmd:DoNotUseThreads","plugin":"pmd","description":"The J2EE specification explicitly forbid use of threads.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Do not call garbage collection explicitly","key":"pmd:DoNotCallGarbageCollectionExplicitly","plugin":"pmd","description":"Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, \"modern\" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself. Example :\n<pre>\n public class GCCall\n{\n  public GCCall()\n  {\n  // Explicit gc call !\n    System.gc();\n  }\n\tpublic void doSomething()\n\t{\n\t\t// Explicit gc call !\n\t\tRuntime.getRuntime().gc();\n\t}\n\n  public explicitGCcall() { // Explicit gc call ! System.gc(); }\n\n  public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); }\n}\n</pre>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Dodgy - Ambiguous invocation of either an inherited or outer method","key":"findbugs:IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD","plugin":"findbugs","description":"<p> An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class. By the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be want\nyou intend. If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to FindBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Call to unsupported method","key":"findbugs:DMI_UNSUPPORTED_METHOD","plugin":"findbugs","description":"<p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Check for oddness that won't work for negative numbers","key":"findbugs:IM_BAD_CHECK_FOR_ODD","plugin":"findbugs","description":"<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won't work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Class doesn't override equals in superclass","key":"findbugs:EQ_DOESNT_OVERRIDE_EQUALS","plugin":"findbugs","description":"<p> This class extends a class that defines an equals method and adds fields, but doesn't\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don't need to override the equals method. Even if you don't need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Dodgy - Class exposes synchronization and semaphores in its public interface","key":"findbugs:PS_PUBLIC_SEMAPHORES","plugin":"findbugs","description":"<p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Dodgy - Class extends Servlet class and uses instance variables","key":"findbugs:MTIA_SUSPECT_SERVLET_INSTANCE_FIELD","plugin":"findbugs","description":"<p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Class extends Struts Action class and uses instance variables","key":"findbugs:MTIA_SUSPECT_STRUTS_INSTANCE_FIELD","plugin":"findbugs","description":"<p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported. \n    </p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Dodgy - Class implements same interface as superclass","key":"findbugs:RI_REDUNDANT_INTERFACES","plugin":"findbugs","description":"<p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface's implementation.\n    </p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Dodgy - Class is final but declares protected field","key":"findbugs:CI_CONFUSED_INHERITANCE","plugin":"findbugs","description":"<p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Dodgy - Class too big for analysis","key":"findbugs:SKIPPED_CLASS_TOO_BIG","plugin":"findbugs","description":"<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Dodgy - Code contains a hard coded reference to an absolute pathname","key":"findbugs:DMI_HARDCODED_ABSOLUTE_FILENAME","plugin":"findbugs","description":"<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");</code>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Complicated, subtle or wrong increment in for-loop","key":"findbugs:QF_QUESTIONABLE_FOR_LOOP","plugin":"findbugs","description":"<p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Computation of average could overflow","key":"findbugs:IM_AVERAGE_COMPUTATION_COULD_OVERFLOW","plugin":"findbugs","description":"<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you \ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6412541\">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\">widely\npublicized the bug pattern</a>.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Consider returning a zero length array rather than null","key":"findbugs:PZLA_PREFER_ZERO_LENGTH_ARRAYS","plugin":"findbugs","description":"<p> It is often a better design to\nreturn a length zero array rather than a null reference to indicate that there\nare no results (i.e., an empty list of results).\nThis way, no explicit check for null is needed by clients of the method.</p>\n\n<p>On the other hand, using null to indicate\n\"there is no answer to this question\" is probably appropriate.\nFor example, <code>File.listFiles()</code> returns an empty list\nif given a directory containing no files, and returns null if the file\nis not a directory.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Dead store of null to local variable","key":"findbugs:DLS_DEAD_LOCAL_STORE_OF_NULL","plugin":"findbugs","description":"<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Dead store to local variable","key":"findbugs:DLS_DEAD_LOCAL_STORE","plugin":"findbugs","description":"<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun's javac compiler often generates dead stores for\nfinal local variables.  Because FindBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Dereference of the result of readLine() without nullcheck","key":"findbugs:NP_DEREFERENCE_OF_READLINE_VALUE","plugin":"findbugs","description":"<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Double assignment of local variable","key":"findbugs:SA_LOCAL_DOUBLE_ASSIGNMENT","plugin":"findbugs","description":"<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre>\n  public void foo() {\n    int x,y;\n    x = x = 17;\n  }\n</pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Exception is caught when Exception is not thrown","key":"findbugs:REC_CATCH_EXCEPTION","plugin":"findbugs","description":"<p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Immediate dereference of the result of readLine()","key":"findbugs:NP_IMMEDIATE_DEREFERENCE_OF_READLINE","plugin":"findbugs","description":"<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Initialization circularity","key":"findbugs:IC_INIT_CIRCULARITY","plugin":"findbugs","description":"<p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Invocation of substring(0), which returns the original value","key":"findbugs:DMI_USELESS_SUBSTRING","plugin":"findbugs","description":"<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Load of known null value","key":"findbugs:NP_LOAD_OF_KNOWN_NULL_VALUE","plugin":"findbugs","description":"<p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was nonnull).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Method checks to see if result of String.indexOf is positive","key":"findbugs:RV_CHECK_FOR_POSITIVE_INDEXOF","plugin":"findbugs","description":"<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Dodgy - Method directly allocates a specific implementation of xml interfaces","key":"findbugs:XFB_XML_FACTORY_BYPASS","plugin":"findbugs","description":"<p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Method discards result of readLine after checking if it is nonnull","key":"findbugs:RV_DONT_JUST_NULL_CHECK_READLINE","plugin":"findbugs","description":"<p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Method uses the same code for two branches","key":"findbugs:DB_DUPLICATE_BRANCHES","plugin":"findbugs","description":"<p>\n      This method uses the same code to implement two branches of a conditional branch.\n\tCheck to ensure that this isn't a coding mistake.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Method uses the same code for two switch clauses","key":"findbugs:DB_DUPLICATE_SWITCH_CLAUSES","plugin":"findbugs","description":"<p>\n      This method uses the same code to implement two clauses of a switch statement.\n\tThis could be a case of duplicate code, but it might also indicate\n\ta coding mistake.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Non serializable object written to ObjectOutput","key":"findbugs:DMI_NONSERIALIZABLE_OBJECT_WRITTEN","plugin":"findbugs","description":"<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Non-Boolean argument formatted using %b format specifier","key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN","plugin":"findbugs","description":"<p>\nAn argument not of type Boolean is being formatted with a %b format specifier. This won't throw an\nexception; instead, it will print true for any nonnull value, and false for null.\nThis feature of format strings is strange, and may not be what you intended.\n</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Dodgy - Parameter must be nonnull but is marked as nullable","key":"findbugs:NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE","plugin":"findbugs","description":"<p> This parameter is always used in a way that requires it to be nonnull,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Possible null pointer dereference due to return value of called method","key":"findbugs:NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE","plugin":"findbugs","description":"<p> The return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked\nfor null.  This may lead to a <code>NullPointerException</code> when the code is executed.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Possible null pointer dereference on path that might be infeasible","key":"findbugs:NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE","plugin":"findbugs","description":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\nDue to the fact that this value had been previously tested for nullness, this is a definite possibility.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Potentially dangerous use of non-short-circuit logic","key":"findbugs:NS_DANGEROUS_NON_SHORT_CIRCUIT","plugin":"findbugs","description":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition, \nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2\">the Java\nLanguage Specification</a> for details\n\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Questionable cast to abstract collection","key":"findbugs:BC_BAD_CAST_TO_ABSTRACT_COLLECTION","plugin":"findbugs","description":"<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don't need to cast it to a Set or List.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Questionable cast to concrete collection","key":"findbugs:BC_BAD_CAST_TO_CONCRETE_COLLECTION","plugin":"findbugs","description":"<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Questionable use of non-short-circuit logic","key":"findbugs:NS_NON_SHORT_CIRCUIT","plugin":"findbugs","description":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2\">the Java\nLanguage Specification</a> for details\n\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Redundant comparison of non-null value to null","key":"findbugs:RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE","plugin":"findbugs","description":"<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Redundant comparison of two null values","key":"findbugs:RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES","plugin":"findbugs","description":"<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Redundant nullcheck of value known to be non-null","key":"findbugs:RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE","plugin":"findbugs","description":"<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Redundant nullcheck of value known to be null","key":"findbugs:RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE","plugin":"findbugs","description":"<p> This method contains a redundant check of a known null value against\nthe constant null.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Remainder of 32-bit signed random integer","key":"findbugs:RV_REM_OF_RANDOM_INT","plugin":"findbugs","description":"<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Remainder of hashCode could be negative","key":"findbugs:RV_REM_OF_HASHCODE","plugin":"findbugs","description":"<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>. \nThis is probably faster than computing the remainder as well.\nIf you don't know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Result of integer multiplication cast to long","key":"findbugs:ICAST_INTEGER_MULTIPLY_CAST_TO_LONG","plugin":"findbugs","description":"<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:\n<code>\n<pre> \n\tlong convertDaysToMilliseconds(int days) { return 1000*3600*24*days; } \n</pre></code>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:\n<code>\n<pre> \n\tlong convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; } \n</pre></code>\nor \n<code>\n<pre> \n\tstatic final long MILLISECONDS_PER_DAY = 24L*3600*1000;\n\tlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; } \n</pre></code>\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Self assignment of local variable","key":"findbugs:SA_LOCAL_SELF_ASSIGNMENT","plugin":"findbugs","description":"<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre>\n  public void foo() {\n    int x = 3;\n    x = x;\n  }\n</pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Test for floating point equality","key":"findbugs:FE_FLOATING_POINT_EQUALITY","plugin":"findbugs","description":"<p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Thread passed where Runnable expected","key":"findbugs:DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED","plugin":"findbugs","description":"<p> A Thread object is passed as a parameter to a method where \na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Transient field of class that isn't Serializable.","key":"findbugs:SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS","plugin":"findbugs","description":"<p> The field is marked as transient, but the class isn't Serializable, so marking it as transient\nhas absolutely no effect. \nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dodgy - Unchecked/unconfirmed cast","key":"findbugs:BC_UNCONFIRMED_CAST","plugin":"findbugs","description":"<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Ensure that your program logic ensures that this\ncast will not fail.\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Dodgy - Unsigned right shift cast to short/byte","key":"findbugs:ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT","plugin":"findbugs","description":"<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Unusual equals method","key":"findbugs:EQ_UNUSUAL","plugin":"findbugs","description":"<p> This class doesn't do any of the patterns we recognize for checking that the type of the argument \nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>","priority":"MINOR","status":"ACTIVE"},
  {"title":"Dodgy - Useless control flow","key":"findbugs:UCF_USELESS_CONTROL_FLOW","plugin":"findbugs","description":"<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre>\n    if (argv.length == 0) {\n\t// TODO: handle this case\n\t}\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Vacuous bit mask operation on integer value","key":"findbugs:INT_VACUOUS_BIT_OPERATION","plugin":"findbugs","description":"<p> This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Dodgy - Vacuous comparison of integer value","key":"findbugs:INT_VACUOUS_COMPARISON","plugin":"findbugs","description":"<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - Write to static field from instance method","key":"findbugs:ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD","plugin":"findbugs","description":"<p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - instanceof will always return true","key":"findbugs:BC_VACUOUS_INSTANCEOF","plugin":"findbugs","description":"<p>\nThis instanceof test will always return true (unless the value being tested is null). \nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - int division result cast to double or float","key":"findbugs:ICAST_IDIV_CAST_TO_DOUBLE","plugin":"findbugs","description":"<p>\nThis code casts the result of an integer division operation to double or \nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<blockquote>\n<pre>\nint x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 =  x / y;\n\n// Right: yields result 0.4\ndouble value2 =  x / (double) y;\n</pre>\n</blockquote>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Dodgy - private readResolve method not inherited by subclasses","key":"findbugs:SE_PRIVATE_READ_RESOLVE_NOT_INHERITED","plugin":"findbugs","description":"<p> This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Dont Import Java Lang","key":"pmd:DontImportJavaLang","plugin":"pmd","description":"Avoid importing anything from the package 'java.lang'. These classes are automatically imported (JLS 7.5.3).","priority":"MINOR","status":"ACTIVE"},
  {"title":"Dont Import Sun","key":"pmd:DontImportSun","plugin":"pmd","description":"Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Dont Nest Jsf In Jstl Iteration","key":"pmd:DontNestJsfInJstlIteration","plugin":"pmd","description":"Do not nest JSF component custom actions inside a custom action that iterates over its body.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Double Checked Locking","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.DoubleCheckedLockingCheck","plugin":"checkstyle","description":"Detect the double-checked locking idiom, a technique that tries to avoid synchronization overhead but is incorrect because of subtle artifacts of the java memory model.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Double checked locking","key":"pmd:DoubleCheckedLocking","plugin":"pmd","description":"Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to. <a href=\"http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html\">More details</a>. Example :\n<pre>\npublic class Foo {\n  Object baz;\n  Object bar() {\n    if(baz == null) { //baz may be non-null yet not fully created\n      synchronized(this){\n        if(baz == null){\n          baz = new Object();\n        }\n      }\n    }\n    return baz;\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Duplicate Imports","key":"pmd:DuplicateImports","plugin":"pmd","description":"Avoid duplicate import statements.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Duplicated blocks","key":"sqale-java:DuplicatedBlocksCheck","plugin":"sqale-java","description":"<p>A violation is created on a file as soon as there is a block of duplicated code on this file: The remediation cost of the violation depends on the number of blocks in the file.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Empty Block","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck","plugin":"checkstyle","description":"Checks for empty blocks.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"option","description":"policy on block contents"},{"name":"tokens","description":"blocks to check"}]},
  {"title":"Empty Catch Block","key":"pmd:EmptyCatchBlock","plugin":"pmd","description":"Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.","priority":"CRITICAL","status":"INACTIVE","params":[{"name":"allowCommentedBlocks","description":"Empty blocks containing comments will be skipped. Default is false."}]},
  {"title":"Empty Finalizer","key":"pmd:EmptyFinalizer","plugin":"pmd","description":"If the finalize() method is empty, then it does not need to exist.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Empty Finally Block","key":"pmd:EmptyFinallyBlock","plugin":"pmd","description":"Avoid empty finally blocks - these can be deleted.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Empty For Initializer Pad","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck","plugin":"checkstyle","description":"Checks the padding of an empty for initializer; that is whether a space is required at an empty for initializer, or such spaces are forbidden. Example : <code>for ( ; i < j; i++, j--)</code>","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on how to pad an empty for iterator"}]},
  {"title":"Empty For Iterator Pad","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck","plugin":"checkstyle","description":"Checks the padding of an empty for iterator; that is whether a space is required at an empty for iterator, or such spaces are forbidden. Example : <code>for (Iterator foo = very.long.line.iterator(); foo.hasNext(); )</code>","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on how to pad an empty for iterator"}]},
  {"title":"Empty If Stmt","key":"pmd:EmptyIfStmt","plugin":"pmd","description":"Empty If Statement finds instances where a condition is checked but nothing is done about it.","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Empty Method In Abstract Class Should Be Abstract","key":"pmd:EmptyMethodInAbstractClassShouldBeAbstract","plugin":"pmd","description":"An empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one.\n  <pre>\npublic abstract class ShouldBeAbstract\n{\n  public Object couldBeAbstract()\n\t{\n\t// Should be abstract method ?\n\t  return null;\n\t}\n\n\tpublic void couldBeAbstract()\n\t{\n\t}\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Empty Statement","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.EmptyStatementCheck","plugin":"checkstyle","description":"Detects empty statements (standalone ';').","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Empty Statement Not In Loop","key":"pmd:EmptyStatementNotInLoop","plugin":"pmd","description":"An empty statement (aka a semicolon by itself) that is not used as the sole body of a for loop or while loop is probably a bug. It could also be a double semicolon, which is useless and should be removed.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Empty Static Initializer","key":"pmd:EmptyStaticInitializer","plugin":"pmd","description":"An empty static initializer was found.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Empty Switch Statements","key":"pmd:EmptySwitchStatements","plugin":"pmd","description":"Avoid empty switch statements.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Empty Synchronized Block","key":"pmd:EmptySynchronizedBlock","plugin":"pmd","description":"Avoid empty synchronized blocks - they're useless.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Empty Try Block","key":"pmd:EmptyTryBlock","plugin":"pmd","description":"Avoid empty try blocks - what's the point?","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Empty While Stmt","key":"pmd:EmptyWhileStmt","plugin":"pmd","description":"Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Equals Avoid Null","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck","plugin":"checkstyle","description":"<p>Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.</p>\n<p>Rationale: Calling the equals() method on String literals will avoid a potential NullPointerException. Also, it is pretty common to see null check right before equals comparisons which is not necessary in the below example.</p>\n<p>For example:\n<pre>\n  String nullString = null;\n  nullString.equals(\"My_Sweet_String\");\n</pre>\n</p>\n\n<p>\nshould be refactored to:\n<pre>\n  String nullString = null;\n  \"My_Sweet_String\".equals(nullString);\n</pre>\n</p>\n<p>Limitations: If the equals method is overridden or a covariant equals method is defined and the implementation is incorrect (where s.equals(t) does not return the same result as t.equals(s)) then rearranging the called on object and parameter may have unexpected results.</p>\n<p>Java's Autoboxing feature has an affect on how this check is implemented. Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null. Those situations could have been included in this check. They would simply act as if they surrounded by String.valueof() which would concatenate the String null.</p>\n<p>The following example will cause a NullPointerException as a result of what autoboxing does.</p>\n<pre>\n  Integer i = null, j = null;\n  String number = \"5\"\n  number.equals(i + j);\n</pre>\n<p>Since, it is difficult to determine what kind of Object is being concatenated all ident concatenation is considered unsafe.</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Equals Hash Code","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck","plugin":"checkstyle","description":"Checks that classes that override equals() also override hashCode().","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Equals Null","key":"pmd:EqualsNull","plugin":"pmd","description":"Inexperienced programmers sometimes confuse comparison concepts and use equals() to compare to null.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Exception As Flow Control","key":"pmd:ExceptionAsFlowControl","plugin":"pmd","description":"Using Exceptions as flow control leads to GOTOish code and obscures true exceptions when debugging.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Excessive Class Length","key":"pmd:ExcessiveClassLength","plugin":"pmd","description":"Long Class files are indications that the class may be trying to do too much. Try to break it down, and reduce the size to something manageable.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The class size reporting threshold. Default is 1000."}]},
  {"title":"Excessive Method Length","key":"pmd:ExcessiveMethodLength","plugin":"pmd","description":"Violations of this rule usually indicate that the method is doing too much. Try to reduce the method size by creating helper methods and removing any copy/pasted code.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The method size reporting threshold. Default is 100."}]},
  {"title":"Excessive Parameter List","key":"pmd:ExcessiveParameterList","plugin":"pmd","description":"Long parameter lists can indicate that a new object should be created to wrap the numerous parameters. Basically, try to group the parameters together.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The parameter count reporting threshold. Default is 10."}]},
  {"title":"Excessive Public Count","key":"pmd:ExcessivePublicCount","plugin":"pmd","description":"A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The public item reporting threshold. Default is 45."}]},
  {"title":"Executable Statement Count","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.ExecutableStatementCountCheck","plugin":"checkstyle","description":"Restricts the number of executable statements to a specified limit (default = 30).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"the maximum threshold allowed. Default is 30."},{"name":"tokens","description":"members to check"}]},
  {"title":"Explicit Initialization","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck","plugin":"checkstyle","description":"Checks if any class or object member explicitly initialized to default for its type value (null for object references, zero for numeric types and char and false for boolean.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Fall Through","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck","plugin":"checkstyle","description":"Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a break, return, throw or continue statement.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"checkLastCaseGroup","description":"Whether we need to check last case group or not. Default is false."},{"name":"reliefPattern","description":"Regulare expression to match the relief comment that supresses the warning about a fall through."}]},
  {"title":"Field names should start with a lower case letter","key":"findbugs:NM_FIELD_NAMING_CONVENTION","plugin":"findbugs","description":"<p>\n      Names of fields that are not final should be in mixed case \n      with a lowercase first letter and the first letters of subsequent words capitalized.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"File Length","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck","plugin":"checkstyle","description":"<p>Checks for long source files.</p>\n    <p>Rationale: If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowable number of lines. Default is 2000."}]},
  {"title":"File Tab Character","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck","plugin":"checkstyle","description":"<p>Checks that there are no tab characters ('\\t') in the source code. Rationale:\n<ul>\n    <li>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</li>\n    <li>From the Apache jakarta coding standards: In a distributed development environment, when the commit messages get sent to a mailing list, they are almost impossible to read if you use tabs.</li>\n</ul></p>","priority":"MINOR","status":"ACTIVE","params":[{"name":"eachLine","description":"whether to report on each line containing a tab, or just the first instance. Default is false."}]},
  {"title":"Final Class","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck","plugin":"checkstyle","description":"Checks that class which has only private constructors is declared as final.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Final Field Could Be Static","key":"pmd:FinalFieldCouldBeStatic","plugin":"pmd","description":"If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Final Local Variable","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck","plugin":"checkstyle","description":"Ensures that local variables that never get their values changed, must be declared final.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check"}]},
  {"title":"Final Parameters","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.FinalParametersCheck","plugin":"checkstyle","description":"Check that method/constructor/catch/foreach parameters are final.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"blocks to check"}]},
  {"title":"Finalize Does Not Call Super Finalize","key":"pmd:FinalizeDoesNotCallSuperFinalize","plugin":"pmd","description":"If the finalize() is implemented, its last action should be to call super.finalize.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Finalize Only Calls Super Finalize","key":"pmd:FinalizeOnlyCallsSuperFinalize","plugin":"pmd","description":"If the finalize() is implemented, it should do something besides just calling super.finalize().","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Finalize Overloaded","key":"pmd:FinalizeOverloaded","plugin":"pmd","description":"Methods named finalize() should not have parameters. It is confusing and probably a bug to overload finalize(). It will not be called by the VM.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Finalize Should Be Protected","key":"pmd:FinalizeShouldBeProtected","plugin":"pmd","description":"If you override finalize(), make it protected. If you make it public, other classes may call it.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"For Loop Should Be While Loop","key":"pmd:ForLoopShouldBeWhileLoop","plugin":"pmd","description":"Some for loops can be simplified to while loops - this makes them more concise.","priority":"MINOR","status":"INACTIVE"},
  {"title":"For Loops Must Use Braces","key":"pmd:ForLoopsMustUseBraces","plugin":"pmd","description":"Avoid using 'for' statements without using curly braces, like <code>for (int i=0; i<42;i++) foo();</code>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Generic Whitespace","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck","plugin":"checkstyle","description":"<p>Checks that the whitespace around the Generic tokens < and >  is correct to the typical convention. The convention is not configurable.</p>\n<p>\nFor example the following is legal:\n</p>\n<pre>\n  List<Integer> x = new ArrayList<Integer>();\n  List<List<Integer>> y = new ArrayList<List<Integer>>();\n</pre>\n<p>\nBut the following example is not:\n</p>\n<pre>\n  List < Integer > x = new ArrayList < Integer > ();\n  List < List < Integer > > y = new ArrayList < List < Integer > > ();\n</pre>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Header","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck","plugin":"checkstyle","description":"<p>Checks that a source file begins with a specified header. Property headerFile specifies a file that contains the required header. Alternatively, the header specification can be set directly in the header property without the need for an external file.</p>\n<p>Property ignoreLines specifies the line numbers to ignore when matching lines in a header file. This property is very useful for supporting headers that contain copyright dates. For example, consider the following header:</p>\n<pre>\n\tline 1: ////////////////////////////////////////////////////////////////////\n\tline 2: // checkstyle:\n\tline 3: // Checks Java source code for adherence to a set of rules.\n\tline 4: // Copyright (C) 2002  Oliver Burn\n\tline 5: ////////////////////////////////////////////////////////////////////\n</pre>\n<p>Since the year information will change over time, you can tell Checkstyle to ignore line 4 by setting property ignoreLines to 4.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"header","description":"the required header specified inline. Individual header lines must be separated by the string \"\\n\" (even on platforms with a different line separator)"},{"name":"ignoreLines","description":"comma-separated list of line numbers to ignore"}]},
  {"title":"Hidden Field","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck","plugin":"checkstyle","description":"Checks that a local variable or a parameter does not shadow a field that is defined in the same class.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"tokens","description":"tokens to check","value":"VARIABLE_DEF"},{"name":"ignoreFormat","description":"pattern for names to ignore"},{"name":"ignoreConstructorParameter","description":"Controls whether to ignore constructor parameters. Default is false.","value":"true"},{"name":"ignoreSetter","description":"Controls whether to ignore the parameter of a property setter method, where the property setter method for field 'xyz' has name 'setXyz', one parameter named 'xyz', and return type void. Default is false.","value":"true"},{"name":"ignoreAbstractMethods","description":"Controls whether to ignore parameters of abstract methods. Default is false.","value":"true"}]},
  {"title":"Hide Utility Class Constructor","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.HideUtilityClassConstructorCheck","plugin":"checkstyle","description":"Make sure that utility classes (classes that contain only static methods) do not have a public constructor.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Idempotent Operations","key":"pmd:IdempotentOperations","plugin":"pmd","description":"Avoid idempotent operations - they are have no effect. Example : <br/><code>int x = 2;<br/> x = x;</code>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"If Else Stmts Must Use Braces","key":"pmd:IfElseStmtsMustUseBraces","plugin":"pmd","description":"Avoid using if..else statements without using curly braces.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"If Stmts Must Use Braces","key":"pmd:IfStmtsMustUseBraces","plugin":"pmd","description":"Avoid using if statements without using curly braces.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Illegal Catch","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck","plugin":"checkstyle","description":"Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"illegalClassNames","description":"exception class names to reject"}]},
  {"title":"Illegal Import","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck","plugin":"checkstyle","description":"Checks for imports from a set of illegal packages, like sun.*","priority":"MAJOR","status":"INACTIVE","params":[{"name":"illegalPkgs","description":"packages to reject"}]},
  {"title":"Illegal Instantiation","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalInstantiationCheck","plugin":"checkstyle","description":"Checks for illegal instantiations where a factory method is preferred. Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor. A simple example is the <code>java.lang.Boolean</code> class. In order to save memory and CPU cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be replaced by calls to <code>Boolean.valueOf()</code>. Some extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"classes","description":"classes that should not be instantiated"}]},
  {"title":"Illegal Throws","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck","plugin":"checkstyle","description":"Throwing java.lang.Error or java.lang.RuntimeException is almost never acceptable.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"illegalClassNames","description":"throw class names to reject"}]},
  {"title":"Illegal Token","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck","plugin":"checkstyle","description":"Checks for illegal tokens. Certain language features often lead to hard to maintain code or are non-obvious to novice developers. Other features may be discouraged in certain frameworks, such as not having native methods in EJB components.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check. Default value is LITERAL_SWITCH, POST_INC, POST_DEC."}]},
  {"title":"Illegal Token Text","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck","plugin":"checkstyle","description":"Checks for illegal token text.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check. Default value is empty."},{"name":"format","description":"illegal pattern"},{"name":"ignoreCase","description":"Controls whether to ignore case when matching. Default is false."},{"name":"message","description":"Message which is used to notify about violations; if empty then the default message is used."}]},
  {"title":"Illegal Type","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck","plugin":"checkstyle","description":"Checks that particular class are never used as types in variable declarations, return values or parameters.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check"},{"name":"illegalClassNames","description":"classes that should not be used as types in variable declarations, return values or parameters."},{"name":"legalAbstractClassNames","description":"abstract classes that may be used as types."},{"name":"ignoredMethodNames","description":"methods that should not be checked"},{"name":"format","description":"pattern for illegal class name"}]},
  {"title":"Immutable Field","key":"pmd:ImmutableField","plugin":"pmd","description":"Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor. This aids in converting existing classes to immutable classes.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Import From Same Package","key":"pmd:ImportFromSamePackage","plugin":"pmd","description":"No need to import a type that lives in the same package.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Import Order","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck","plugin":"checkstyle","description":"Checks the ordering/grouping of imports. Features are:<ul>\n    <li>groups imports: ensures that groups of imports come in a specific order (e.g., java. comes first, javax. comes second, then everything else)</li>\n    <li>adds a separation between groups : ensures that a blank line sit between each group</li>\n    <li>sorts imports inside each group: ensures that imports within each group are in lexicographic order</li>\n    <li>sorts according to case: ensures that the comparison between imports is case sensitive</li>\n    <li>groups static imports: ensures the relative order between regular imports and static imports</li>\n    </ul>","priority":"MINOR","status":"INACTIVE","params":[{"name":"groups","description":"list of imports groups (every group identified by string it's started)"},{"name":"ordered","description":"whether imports within group should be sorted. Default is true."},{"name":"separated","description":"whether imports groups should be separated by, at least, one blank line. Default is false."},{"name":"caseSensitive","description":"whether string comparision should be case sensitive or not. Default is true."},{"name":"option","description":"policy on the relative order between regular imports and static imports. Values are top, above, inflow, under, bottom. See examples: http://checkstyle.sourceforge.net/property_types.html#importOrder"}]},
  {"title":"Indentation","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck","plugin":"checkstyle","description":"Checks correct indentation of Java Code.","priority":"MINOR","status":"ACTIVE","params":[{"name":"basicOffset","description":"how many spaces to use for new indentation level. Default is 4.","value":"2"},{"name":"braceAdjustment","description":"how far brace should be indented when on next line. Default is 0."},{"name":"caseIndent","description":"how much to indent a case label. Default is 4.","value":"2"}]},
  {"title":"Inefficient Empty String Check","key":"pmd:InefficientEmptyStringCheck","plugin":"pmd","description":"String.trim().length() is an inefficient way to check if a String is really empty, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Inefficient String Buffering","key":"pmd:InefficientStringBuffering","plugin":"pmd","description":"Avoid concatenating non literals in a StringBuffer constructor or append().","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Inner Assignment","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck","plugin":"checkstyle","description":"Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"tokens","description":"assignments to check"}]},
  {"title":"Instantiation To Get Class","key":"pmd:InstantiationToGetClass","plugin":"pmd","description":"Avoid instantiating an object just to call getClass() on it; use the .class public member instead. Example : replace <code>Class c = new String().getClass();</code> with <code>Class c = String.class;</code>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Insufficient String Buffer Declaration","key":"pmd:InsufficientStringBufferDeclaration","plugin":"pmd","description":"Failing to pre-size a StringBuffer properly could cause it to re-size many times during runtime. This rule checks the characters that are actually passed into StringBuffer.append(), but represents a best guess worst case scenario. An empty StringBuffer constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Insufficient branch coverage by unit tests","key":"sqale-java:BranchCoverageCheck","plugin":"sqale-java","description":"<p>A violation is created on a file as soon as the line coverage on this file is less than the required threshold. The remediation cost of the violation depends on the lines to be covered in order to reach the required threshold.</p>","priority":"MAJOR","status":"ACTIVE","params":[{"name":"minimumBranchCoverageRatio","description":"The minimum required branch coverage ratio.","value":"65"}]},
  {"title":"Insufficient line coverage by unit tests","key":"sqale-java:LineCoverageCheck","plugin":"sqale-java","description":"<p>A violation is created on a file as soon as the line coverage on this file is less than the required threshold. The remediation cost of the violation depends on the lines to be covered in order to reach the required threshold.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimumLineCoverageRatio","description":"The minimum required line coverage ratio."}]},
  {"title":"Integer Instantiation","key":"pmd:IntegerInstantiation","plugin":"pmd","description":"In JDK 1.5, calling new Integer() causes memory allocation. Integer.valueOf() is more memory friendly.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Interface Is Type","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.InterfaceIsTypeCheck","plugin":"checkstyle","description":"Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.  According to Bloch, an interface should describe a type. It is therefore inappropriate to define an interface that does not contain any methods but only constants. The Standard class javax.swing.SwingConstants is an example of a class that would be flagged by this check. The check can be configured to also disallow marker interfaces like java.io.Serializable, that do not contain methods or constants at all.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"allowMarkerInterfaces","description":"Controls whether marker interfaces like Serializable are allowed. Default is true."}]},
  {"title":"Internationalization - Consider using Locale parameterized version of invoked method","key":"findbugs:DM_CONVERT_CASE","plugin":"findbugs","description":"<p> A String is being converted to upper or lowercase, using the platform's default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <table><tr><td>String.toUpperCase( Locale l )</td></tr><tr><td>String.toLowerCase( Locale l )</td></tr></table>\n      <p>versions instead.</p>","priority":"INFO","status":"ACTIVE"},
  {"title":"Java5 migration - Byte instantiation","key":"pmd:ByteInstantiation","plugin":"pmd","description":"In JDK 1.5, calling new Byte() causes memory allocation. Byte.valueOf() is more memory friendly. Example :\n<pre>\npublic class Foo {\nprivate Byte i = new Byte(0); // change to Byte i =\nByte.valueOf(0);\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Java5 migration - Long instantiation","key":"pmd:LongInstantiation","plugin":"pmd","description":"In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly. Example :\n  <pre>\npublic class Foo {\nprivate Long i = new Long(0); // change to Long i =\nLong.valueOf(0);\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Java5 migration - Short instantiation","key":"pmd:ShortInstantiation","plugin":"pmd","description":"In JDK 1.5, calling new Short() causes memory allocation. Short.valueOf() is more memory friendly.  Example :\n  <pre>\npublic class Foo {\nprivate Short i = new Short(0); // change to Short i =\nShort.valueOf(0);\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"JavaNCSS","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.JavaNCSSCheck","plugin":"checkstyle","description":"Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the  specification for the JavaNCSS-Tool  written by Chr. Clemens Lee.\nRougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.\nThe NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.\nThe NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.\n<br>\nRationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsabilities and/or functionalities which should be decomposed into smaller units.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"methodMaximum","description":"the maximum allowed number of non commenting lines in a method. Default is 50."},{"name":"classMaximum","description":"the maximum allowed number of non commenting lines in a class. Default is 1500."},{"name":"fileMaximum","description":"the maximum allowed number of non commenting lines in a file including all top level and nested classes. Default is 2000."}]},
  {"title":"Javadoc Method","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck","plugin":"checkstyle","description":"Checks the Javadoc of a method or constructor. By default, does not check for unused throws. \n    To allow documented java.lang.RuntimeExceptions that are not declared, set property allowUndeclaredRTE to true. \n    The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. \n    To verify another scope, set property scope to a different scope.\n    \n    <br><br>Error messages about parameters and type parameters for which no param tags are present can be suppressed by defining property allowMissingParamTags. \n    Error messages about exceptions which are declared to be thrown, but for which no throws tag is present can be suppressed by defining property allowMissingThrowsTags. \n    Error messages about methods which return non-void but for which no return tag is present can be suppressed by defining property allowMissingReturnTag.\n\n    <br><br>Javadoc is not required on a method that is tagged with the @Override annotation. \n    However under Java 5 it is not possible to mark a method required for an interface (this was corrected under Java 6). \n    Hence Checkstyle supports using the convention of using a single {@inheritDoc} tag instead of all the other tags.\n    \n    <br><br>Note that only inheritable items will allow the {@inheritDoc} tag to be used in place of comments. \n    Static methods at all visibilities, private non-static methods and constructors are not inheritable.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"scope","description":"visibility scope where Javadoc comments are checked"},{"name":"excludeScope","description":"visibility scope where Javadoc comments are not checked"},{"name":"allowUndeclaredRTE","description":"whether to allow documented exceptions that are not declared if they are a subclass of java.lang.RuntimeException. Default is false."},{"name":"allowThrowsTagsForSubclasses","description":"whether to allow documented exceptions that are subclass of one of declared exception. Default is false."},{"name":"allowMissingParamTags","description":"whether to ignore errors when a method has parameters but does not have matching param tags in the javadoc. Default is false."},{"name":"allowMissingThrowsTags","description":"whether to ignore errors when a method declares that it throws exceptions but does have matching throws tags in the javadoc. Default is false."},{"name":"allowMissingReturnTag","description":"whether to ignore errors when a method returns non-void type does have a return tag in the javadoc. Default is false."},{"name":"allowMissingJavadoc","description":"whether to ignore errors when a method javadoc is missed. Default is false."},{"name":"allowMissingPropertyJavadoc","description":"Whether to allow missing Javadoc on accessor methods for properties (setters and getters). The setter and getter methods must match exactly the structures below.  <code> public void setNumber(final int number) { mNumber = number; }  public int getNumber() { return mNumber; }  public boolean isSomething() { return false; } </code>. Default is false."},{"name":"tokens","description":"definitions to check"}]},
  {"title":"Javadoc Package","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck","plugin":"checkstyle","description":"<p>Checks that each Java package has a Javadoc file used for commenting. By default it only allows a package-info.java file, but can be configured to allow a package.html file. An error will be reported if both files exist as this is not allowed by the Javadoc tool.</p>","priority":"MINOR","status":"INACTIVE","params":[{"name":"allowLegacy","description":"If set then allow the use of a package.html file."}]},
  {"title":"Javadoc Style","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck","plugin":"checkstyle","description":"Validates Javadoc comments to help ensure they are well formed. The following checks are performed:\n    <ul>\n      <li>Ensures the first sentence ends with proper punctuation (That is a period, question mark, or exclamation mark, by default). \n      Javadoc automatically places the first sentence in the method summary table and index. With out proper punctuation the Javadoc may be malformed. \n      All items eligible for the {@inheritDoc} tag are exempt from this requirement.</li>\n      <li>Check text for Javadoc statements that do not have any description. \n      This includes both completely empty Javadoc, and Javadoc with only tags such as @param and @return.</li>\n      <li>Check text for incomplete HTML tags. Verifies that HTML tags have corresponding end tags and issues an \"Unclosed HTML tag found:\" error if not. \n      An \"Extra HTML tag found:\" error is issued if an end tag is found without a previous open tag.</li>\n      <li>Check that a package Javadoc comment is well-formed (as described above) and NOT missing from any package-info.java files.</li>\n      <li>Check for allowed HTML tags. The list of allowed HTML tags is \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \n      \"bdo\", \"big\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"del\", \"div\", \"dfn\", \"dl\", \"em\", \"fieldset\", \n      \"h1\" to \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\", \n      \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thread\", \"tr\", \"tt\", \"ul\"</li>\n    </ul>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"scope","description":"visibility scope where Javadoc comments are checked"},{"name":"excludeScope","description":"visibility scope where Javadoc comments are not checked"},{"name":"checkFirstSentence","description":"Whether to check the first sentence for proper end of sentence. Default is true."},{"name":"checkEmptyJavadoc","description":"Whether to check if the Javadoc is missing a describing text. Default is false."},{"name":"checkHtml","description":"Whether to check for incomplete html tags. Default is true."},{"name":"tokens","description":"definitions to check"}]},
  {"title":"Javadoc Type","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck","plugin":"checkstyle","description":"Checks Javadoc comments for class and interface definitions. By default, does not check for author or version tags. \n    The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to one of the Scope constants. \n    To define the format for an author tag or a version tag, set property authorFormat or versionFormat respectively to a regular expression.\n    <br><br>Error messages about type parameters for which no param tags are present can be suppressed by defining property allowMissingParamTags.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"scope","description":"visibility scope where Javadoc comments are checked"},{"name":"excludeScope","description":"visibility scope where Javadoc comments are not checked"},{"name":"authorFormat","description":"pattern for @author tag"},{"name":"versionFormat","description":"pattern for @version tag"},{"name":"allowMissingParamTags","description":"whether to ignore errors when a class has type parameters but does not have matching param tags in the javadoc. Default is false."},{"name":"tokens","description":"definitions to check"}]},
  {"title":"Javadoc Variable","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck","plugin":"checkstyle","description":"Checks that a variable has Javadoc comment.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"scope","description":"visibility scope where Javadoc comments are checked"},{"name":"excludeScope","description":"visibility scope where Javadoc comments are not checked"}]},
  {"title":"Jumbled Incrementer","key":"pmd:JumbledIncrementer","plugin":"pmd","description":"Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.\n    <br>Example : \n    <pre>\npublic class JumbledIncrementerRule1 {\n  public void foo() {\n   for (int i = 0; i < 10; i++) {\n    for (int k = 0; k < 20; i++) {\n     System.out.println(\"Hello\");\n    }\n   }\n  }\n}</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Left Curly","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck","plugin":"checkstyle","description":"Checks for the placement of left curly braces for code blocks. The policy to verify is specified using property option. Policies <code>eol</code> and <code>nlow</code> take into account property maxLineLength.","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on placement of a left curly brace ('{'). eol : the brace must always be on the end of the line, nl : he brace must always be on a new line, nlow : ff the brace will fit on the first line of the statement, taking into account maximum line length, then apply eol rule. Otherwise apply the nl rule. nlow is a mnemonic for 'new line on wrap'."},{"name":"maxLineLength","description":"maximum number of characters in a line. Default is 80."},{"name":"tokens","description":"blocks to check"}]},
  {"title":"Line Length","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck","plugin":"checkstyle","description":"Checks for long lines.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"ignorePattern","description":"pattern for lines to ignore"},{"name":"max","description":"maximum allowable line length. Default is 80.","value":"180"},{"name":"tabWidth","description":"number of expanded spaces for a tab character. Default is 8."}]},
  {"title":"Local Final Variable Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.LocalFinalVariableNameCheck","plugin":"checkstyle","description":"Checks that local final variable names conform to a format specified by the format property.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"format","description":"Validates identifiers for local, final variables, including catch parameters"}]},
  {"title":"Local Home Naming Convention","key":"pmd:LocalHomeNamingConvention","plugin":"pmd","description":"The Local Home interface of a Session EJB should be suffixed by \"LocalHome\".","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Local Interface Session Naming Convention","key":"pmd:LocalInterfaceSessionNamingConvention","plugin":"pmd","description":"The Local Interface of a Session EJB should be suffixed by \"Local\".","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Local Variable Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.LocalVariableNameCheck","plugin":"checkstyle","description":"Checks that local, non-final variable names conform to a format specified by the format property.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"format","description":"Validates identifiers for local, non-final variables, including catch parameters"},{"name":"tokens","description":"Controls whether the check applies to variable declarations or catch clause parameters"}]},
  {"title":"Local variable could be final","key":"pmd:LocalVariableCouldBeFinal","plugin":"pmd","description":"A local variable assigned only once can be declared final. Example :\n  <pre>\npublic class Bar {\n public void foo () {\n  String a = \"a\"; //if a will not be assigned again it is better to do this:\n  final String b = \"b\";\n }\n}\n  </pre>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Logger Is Not Static Final","key":"pmd:LoggerIsNotStaticFinal","plugin":"pmd","description":"In most cases, the Logger can be declared static and final.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Long Variable","key":"pmd:LongVariable","plugin":"pmd","description":"Detects when a field, formal or local variable is declared with a long name.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The variable length reporting threshold. Default is 17."}]},
  {"title":"Loose coupling","key":"pmd:LooseCoupling","plugin":"pmd","description":"Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Magic Number","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck","plugin":"checkstyle","description":"Checks for magic numbers.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check"},{"name":"ignoreNumbers","description":"non-magic numbers. Default is -1,0,1,2."}]},
  {"title":"Malicious code vulnerability - Field is a mutable Hashtable","key":"findbugs:MS_MUTABLE_HASHTABLE","plugin":"findbugs","description":"<p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field is a mutable array","key":"findbugs:MS_MUTABLE_ARRAY","plugin":"findbugs","description":"<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field isn't final and can't be protected from malicious code","key":"findbugs:MS_CANNOT_BE_FINAL","plugin":"findbugs","description":"<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn't allow\n   any easy fix to this problem.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field isn't final but should be","key":"findbugs:MS_SHOULD_BE_FINAL","plugin":"findbugs","description":"<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field should be both final and package protected","key":"findbugs:MS_FINAL_PKGPROTECT","plugin":"findbugs","description":"<p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field should be moved out of an interface and made package protected","key":"findbugs:MS_OOI_PKGPROTECT","plugin":"findbugs","description":"<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Field should be package protected","key":"findbugs:MS_PKGPROTECT","plugin":"findbugs","description":"<p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Finalizer should be protected, not public","key":"findbugs:FI_PUBLIC_SHOULD_BE_PROTECTED","plugin":"findbugs","description":"<p> A class's <code>finalize()</code> method should have protected access,\n   not public.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - May expose internal representation by incorporating reference to mutable object","key":"findbugs:EI_EXPOSE_REP2","plugin":"findbugs","description":"<p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - May expose internal representation by returning reference to mutable object","key":"findbugs:EI_EXPOSE_REP","plugin":"findbugs","description":"<p> Returning a reference to a mutable object value stored in one of the object's fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - May expose internal static state by storing a mutable object into a static field","key":"findbugs:EI_EXPOSE_STATIC_REP2","plugin":"findbugs","description":"<p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Malicious code vulnerability - Public static method may expose internal representation by returning array","key":"findbugs:MS_EXPOSE_REP","plugin":"findbugs","description":"<p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Member Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck","plugin":"checkstyle","description":"Checks that instance variable names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for non-static fields"},{"name":"applyToPublic","description":"Controls whether to apply the check to public member. Default is true."},{"name":"applyToProtected","description":"Controls whether to apply the check to protected member. Default is true."},{"name":"applyToPackage","description":"Controls whether to apply the check to package-private member. Default is true."},{"name":"applyToPrivate","description":"Controls whether to apply the check to private member. Default is true."}]},
  {"title":"Message Driven Bean And Session Bean Naming Convention","key":"pmd:MDBAndSessionBeanNamingConvention","plugin":"pmd","description":"The EJB Specification state that any MessageDrivenBean or SessionBean should be suffixed by Bean.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Method Argument Could Be Final","key":"pmd:MethodArgumentCouldBeFinal","plugin":"pmd","description":"A method argument that is never assigned can be declared final.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Method Length","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck","plugin":"checkstyle","description":"Checks for long methods.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowable number of lines. Default is 150."},{"name":"countEmpty","description":"whether to count empty lines and single line comments of the form //. Default is true."},{"name":"tokens","description":"blocks to check"}]},
  {"title":"Method Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.MethodNameCheck","plugin":"checkstyle","description":"Checks that method names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for methods"}]},
  {"title":"Method Param Pad","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck","plugin":"checkstyle","description":"Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"allowLineBreaks","description":"whether a line break between the identifier and left parenthesis is allowed. Default is false."},{"name":"tokens","description":"tokens to check"},{"name":"option","description":"policy on how to pad method parameter. Default is nospace."}]},
  {"title":"Method names should start with a lower case letter","key":"findbugs:NM_METHOD_NAMING_CONVENTION","plugin":"findbugs","description":"<p>\n      Methods should be verbs, in mixed case with the first letter lowercase, \n      with the first letter of each internal word capitalized.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Misplaced Null Check","key":"pmd:MisplacedNullCheck","plugin":"pmd","description":"The null check here is misplaced. if the variable is null you'll get a NullPointerException. \n      Either the check is useless (the variable will never be null) or it's incorrect.\n      <br>Example : \n      <pre>\nif (object1!=null && object2.equals(object1)) { \n  ...\n}      \n      </pre>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Missing Break In Switch","key":"pmd:MissingBreakInSwitch","plugin":"pmd","description":"A switch statement without an enclosed break statement may be a bug.","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Missing Constructor","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MissingCtorCheck","plugin":"checkstyle","description":"Checks that classes (except abstract one) define a constructor and don't rely on the default one.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Missing Deprecated","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck","plugin":"checkstyle","description":"Verifies that both the java.lang.Deprecated annotation is present and the @deprecated Javadoc tag is present when either is present.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Missing Override","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck","plugin":"checkstyle","description":"Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"javaFiveCompatibility","description":"When this property is true this check will only check classes, interfaces, etc. that do not contain the extends or implements keyword or are not anonymous classes. This means it only checks methods overridden from java.lang.Object  Java 5 Compatibility mode severely limits this check. It is recommended to only use it on Java 5 source."}]},
  {"title":"Missing Serial Version UID","key":"pmd:MissingSerialVersionUID","plugin":"pmd","description":"Classes that are serializable should provide a serialVersionUID field.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Missing Static Method In Non Instantiatable Class","key":"pmd:MissingStaticMethodInNonInstantiatableClass","plugin":"pmd","description":"A class that has private constructors and does not have any static methods or fields cannot be used.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Missing Switch Default","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck","plugin":"checkstyle","description":"Checks that switch statement has default clause.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Modified Control Variable","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck","plugin":"checkstyle","description":"Check for ensuring that for loop control variables are not modified inside the for block.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Modifier Order","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck","plugin":"checkstyle","description":"Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. The correct order is : public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp.","priority":"MINOR","status":"INACTIVE"},
  {"title":"More Than One Logger","key":"pmd:MoreThanOneLogger","plugin":"pmd","description":"Normally only one logger is used in each class.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Multiple String Literals","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck","plugin":"checkstyle","description":"Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"allowedDuplicates","description":"The maximum number of occurences to allow without generating a warning. Default is 1."},{"name":"ignoreStringsRegexp","description":"regexp pattern for ignored strings (with quotation marks)"},{"name":"ignoreOccurrenceContext","description":"Token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like Annotations or static initializers from the check."}]},
  {"title":"Multiple Variable Declarations","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck","plugin":"checkstyle","description":"Checks that each variable declaration is in its own statement and on its own line.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Multithreaded correctness - A thread was created using the default empty run method","key":"findbugs:DM_USELESS_THREAD","plugin":"findbugs","description":"<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - A volatile reference to an array doesn't treat the array elements as volatile","key":"findbugs:VO_VOLATILE_REFERENCE_TO_ARRAY","plugin":"findbugs","description":"<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Call to static Calendar","key":"findbugs:STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE","plugin":"findbugs","description":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Call to static DateFormat","key":"findbugs:STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE","plugin":"findbugs","description":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Class's readObject() method is synchronized","key":"findbugs:RS_READOBJECT_SYNC","plugin":"findbugs","description":"<p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Class's writeObject() method is synchronized but nothing else is","key":"findbugs:WS_WRITEOBJECT_SYNC","plugin":"findbugs","description":"<p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Condition.await() not in loop","key":"findbugs:WA_AWAIT_NOT_IN_LOOP","plugin":"findbugs","description":"<p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Constructor invokes Thread.start()","key":"findbugs:SC_START_IN_CTOR","plugin":"findbugs","description":"<p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Empty synchronized block","key":"findbugs:ESync_EMPTY_SYNC","plugin":"findbugs","description":"<p> The code contains an empty synchronized block:</p>\n<pre>\nsynchronized() {}\n</pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Field not guarded against concurrent access","key":"findbugs:IS_FIELD_NOT_GUARDED","plugin":"findbugs","description":"<p> This field is annotated with net.jcip.annotations.GuardedBy, \nbut can be accessed in a way that seems to violate the annotation.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Inconsistent synchronization","key":"findbugs:IS2_INCONSISTENT_SYNC","plugin":"findbugs","description":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled \"Unsynchronized access\" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Inconsistent synchronization","key":"findbugs:IS_INCONSISTENT_SYNC","plugin":"findbugs","description":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Multithreaded correctness - Incorrect lazy initialization and update of static field","key":"findbugs:LI_LAZY_INIT_UPDATE_STATIC","plugin":"findbugs","description":"<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further accessed. \nThe setting of the field is visible to other threads as soon as it is set. If the\nfuther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Incorrect lazy initialization of static field","key":"findbugs:LI_LAZY_INIT_STATIC","plugin":"findbugs","description":"<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Invokes run on a thread (did you mean to start it instead?)","key":"findbugs:RU_INVOKE_RUN","plugin":"findbugs","description":"<p> This method explicitly invokes <code>run()</code> on an object.&nbsp;\n  In general, classes implement the <code>Runnable</code> interface because\n  they are going to have their <code>run()</code> method invoked in a new thread,\n  in which case <code>Thread.start()</code> is the right method to call.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Method calls Thread.sleep() with a lock held","key":"findbugs:SWL_SLEEP_WITH_LOCK_HELD","plugin":"findbugs","description":"<p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Method does not release lock on all exception paths","key":"findbugs:UL_UNRELEASED_LOCK_EXCEPTION_PATH","plugin":"findbugs","description":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Method does not release lock on all paths","key":"findbugs:UL_UNRELEASED_LOCK","plugin":"findbugs","description":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Method spins on field","key":"findbugs:SP_SPIN_ON_FIELD","plugin":"findbugs","description":"<p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Method synchronizes on an updated field","key":"findbugs:ML_SYNC_ON_UPDATED_FIELD","plugin":"findbugs","description":"<p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Mismatched notify()","key":"findbugs:MWN_MISMATCHED_NOTIFY","plugin":"findbugs","description":"<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Mismatched wait()","key":"findbugs:MWN_MISMATCHED_WAIT","plugin":"findbugs","description":"<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Monitor wait() called on Condition","key":"findbugs:DM_MONITOR_WAIT_ON_CONDITION","plugin":"findbugs","description":"<p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Mutable servlet field","key":"findbugs:MSF_MUTABLE_SERVLET_FIELD","plugin":"findbugs","description":"<p>A web server generally only creates one instance of servlet or jsp class (i.e., treats\nthe class as a Singleton), \nand will \nhave multiple threads invoke methods on that instance to service multiple \nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Naked notify","key":"findbugs:NN_NAKED_NOTIFY","plugin":"findbugs","description":"<p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Possible double check of field","key":"findbugs:DC_DOUBLECHECK","plugin":"findbugs","description":"<p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Static Calendar","key":"findbugs:STCAL_STATIC_CALENDAR_INSTANCE","plugin":"findbugs","description":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Static DateFormat","key":"findbugs:STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE","plugin":"findbugs","description":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Sychronization on getClass rather than class literal","key":"findbugs:WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL","plugin":"findbugs","description":"<p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.\n     For example, consider this code from java.awt.Label:\n     <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (getClass()) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n     <p>Subclasses of <code>Label</code> won't synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code>\n      <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (Label.class) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n      <p>Bug pattern contributed by Jason Mehrens</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization on Boolean could lead to deadlock","key":"findbugs:DL_SYNCHRONIZATION_ON_BOOLEAN","plugin":"findbugs","description":"<p> The code synchronizes on a boxed primitive constant, such as an Boolean.\n<pre>\nprivate static Boolean inited = Boolean.FALSE;\n...\n  synchronized(inited) { \n    if (!inited) {\n       init();\n       inited = Boolean.TRUE;\n       }\n     }\n...\n</pre>\n</p>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization on boxed primitive could lead to deadlock","key":"findbugs:DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE","plugin":"findbugs","description":"<p> The code synchronizes on a boxed primitive constant, such as an Integer.\n<pre>\nprivate static Integer count = 0;\n...\n  synchronized(count) { \n     count++;\n     }\n...\n</pre>\n</p>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization on boxed primitive values","key":"findbugs:DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE","plugin":"findbugs","description":"<p> The code synchronizes on an apparently unshared boxed primitive, \nsuch as an Integer.\n<pre>\nprivate static final Integer fileLock = new Integer(1);\n...\n  synchronized(fileLock) { \n     .. do something ..\n     }\n...\n</pre>\n</p>\n<p>It would be much better, in this code, to redeclare fileLock as\n<pre>\nprivate static final Object fileLock = new Object();\n</pre>\nThe existing code might be OK, but it is confusing and a \nfuture refactoring, such as the \"Remove Boxing\" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared \nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization on field in futile attempt to guard that field","key":"findbugs:ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD","plugin":"findbugs","description":"<p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not \nprovide the mutual exclusion you need, and other threads might \nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:\n\n<p><pre>\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n }\n</pre>\n\n\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization on interned String could lead to deadlock","key":"findbugs:DL_SYNCHRONIZATION_ON_SHARED_CONSTANT","plugin":"findbugs","description":"<p> The code synchronizes on interned String.\n<pre>\nprivate static String LOCK = \"LOCK\";\n...\n  synchronized(LOCK) { ...}\n...\n</pre>\n</p>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this could\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronization performed on java.util.concurrent Lock","key":"findbugs:JLM_JSR166_LOCK_MONITORENTER","plugin":"findbugs","description":"<p> This method performs synchronization on an implementation of\n<code>java.util.concurrent.locks.Lock</code>.  You should use\nthe <code>lock()</code> and <code>unlock()</code> methods instead.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Synchronize and null check on the same field.","key":"findbugs:NP_SYNC_AND_NULL_CHECK_FIELD","plugin":"findbugs","description":"<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on \nanother field.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Unconditional wait","key":"findbugs:UW_UNCOND_WAIT","plugin":"findbugs","description":"<p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n\tverify that condition it intends to wait for is not already satisfied\n\tbefore calling wait; any previous notifications will be ignored.\n  </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Unsynchronized get method, synchronized set method","key":"findbugs:UG_SYNC_SET_UNSYNC_GET","plugin":"findbugs","description":"<p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Using notify() rather than notifyAll()","key":"findbugs:NO_NOTIFY_NOT_NOTIFYALL","plugin":"findbugs","description":"<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Wait not in loop","key":"findbugs:WA_NOT_IN_LOOP","plugin":"findbugs","description":"<p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Multithreaded correctness - Wait with two locks held","key":"findbugs:TLW_TWO_LOCK_WAIT","plugin":"findbugs","description":"<p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Mutable Exception","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck","plugin":"checkstyle","description":"Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"pattern for name of exception class."}]},
  {"title":"My XPath rule","key":"pmd:XPathRule_1287161194","plugin":"pmd","description":"My description","priority":"INFO","status":"INACTIVE","params":[{"name":"xpath","description":"XPath expressions."},{"name":"message","description":"Message to display when a violation occurs."}]},
  {"title":"NPath Complexity","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck","plugin":"checkstyle","description":"Checks the npath complexity of a method against a specified limit (default = 200). The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"the maximum threshold allowed. Default is 200."}]},
  {"title":"NPath complexity","key":"pmd:NPathComplexity","plugin":"pmd","description":"The NPath complexity of a method is the number of acyclic execution paths through that method. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity. Example :\n<pre>\npublic class Foo {\n  void bar() {\n   // lots of complicated code\n  }\n }\n</pre>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The npath reporting threshold. Default is 200."}]},
  {"title":"Naming - Avoid dollar signs","key":"pmd:AvoidDollarSigns","plugin":"pmd","description":"Avoid using dollar signs in variable/method/class/interface names.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Naming - Avoid field name matching method name","key":"pmd:AvoidFieldNameMatchingMethodName","plugin":"pmd","description":"It is somewhat confusing to have a field name with the same name as a method. While this is totally legal, having information (field) and actions (method) is not clear naming. Example :\n<pre>\npublic class Foo {\n  Object bar;\n  // bar is data or an action or both?\n  void bar() {\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Naming - Avoid field name matching type name","key":"pmd:AvoidFieldNameMatchingTypeName","plugin":"pmd","description":"It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and or field names could be more precise. Example :\n<pre>\npublic class Foo extends Bar {\n  // There's probably a better name for foo\n  int foo;\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Naming - Class naming conventions","key":"pmd:ClassNamingConventions","plugin":"pmd","description":"Class names should always begin with an upper case character.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Naming - Method naming conventions","key":"pmd:MethodNamingConventions","plugin":"pmd","description":"Method names should always begin with a lower case character, and should not contain underscores. Example :\n<pre>\npublic class Foo {\n  public void fooStuff() {\n  }\n}","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Naming - Method with same name as enclosing class","key":"pmd:MethodWithSameNameAsEnclosingClass","plugin":"pmd","description":"Non-constructor methods should not have the same name as the enclosing class. Example :\n<pre>\npublic class MyClass {\n  // this is bad because it is a method\n  public void MyClass() {}\n  // this is OK because it is a constructor\n  public MyClass() {}\n}\n</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Naming - Misleading variable name","key":"pmd:MisleadingVariableName","plugin":"pmd","description":"Detects when a non-field has a name starting with 'm_'. This usually indicates a field and thus is confusing. Example :\n<pre>\npublic class Foo {\n  private int m_foo; // OK\n  public void bar(String m_baz) {  // Bad\n    int m_boz = 42; // Bad\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Naming - Short method name","key":"pmd:ShortMethodName","plugin":"pmd","description":"Detects when very short method names are used. Example :\n<pre>\npublic class ShortMethod {\n  public void a( int i ) { // Violation\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Naming - Suspicious Hashcode method name","key":"pmd:SuspiciousHashcodeMethodName","plugin":"pmd","description":"The method name and return type are suspiciously close to hashCode(), which may mean you are intending to override the hashCode() method. Example :\n<pre>\npublic class Foo {\n  public int hashcode() {\n  // oops, this probably was supposed to be hashCode\n  }\n}</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Naming - Suspicious constant field name","key":"pmd:SuspiciousConstantFieldName","plugin":"pmd","description":"A field name is all in uppercase characters, which in Sun's Java naming conventions indicate a constant. However, the field is not final. Example :\n<pre>\npublic class Foo {\n  // this is bad, since someone could accidentally\n  // do PI = 2.71828; which is actualy e\n  // final double PI = 3.16; is ok\n  double PI = 3.16;\n}\n</pre>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Naming - Suspicious equals method name","key":"pmd:SuspiciousEqualsMethodName","plugin":"pmd","description":"The method name and parameter number are suspiciously close to equals(Object), which may mean you are intending to override the equals(Object) method. Example :\n<pre>\npublic class Foo {\n  public int equals(Object o) {\n  // oops, this probably was supposed to be boolean equals\n  }\n  public boolean equals(String s) {\n  // oops, this probably was supposed to be equals(Object)\n  }\n}\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Naming - Variable naming conventions","key":"pmd:VariableNamingConventions","plugin":"pmd","description":"A variable naming conventions rule - customize this to your liking. Currently, it checks for final variables that should be fully capitalized and non-final variables that should not include underscores.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"staticPrefix","description":"A prefix for static variables"},{"name":"staticSuffix","description":"A suffix for static variables"},{"name":"memberPrefix","description":"A prefix for member variables"},{"name":"memberSuffix","description":"A suffix for member variables"}]},
  {"title":"Ncss Constructor Count","key":"pmd:NcssConstructorCount","plugin":"pmd","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The constructor NCSS count reporting threshold. Default is 100."}]},
  {"title":"Ncss Method Count","key":"pmd:NcssMethodCount","plugin":"pmd","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"minimum","description":"The method NCSS count reporting threshold. Default is 100."}]},
  {"title":"Ncss Type Count","key":"pmd:NcssTypeCount","plugin":"pmd","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.","priority":"MAJOR","status":"ACTIVE","params":[{"name":"minimum","description":"The type NCSS count reporting threshold. Default is 1500."}]},
  {"title":"Need Braces","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck","plugin":"checkstyle","description":"Checks for braces around code blocks.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"blocks to check"}]},
  {"title":"Nested If Depth","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck","plugin":"checkstyle","description":"Restricts nested if-else blocks to a specified depth (default = 1).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"allowed nesting depth. Default is 1."}]},
  {"title":"Nested Try Depth","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck","plugin":"checkstyle","description":"Restricts nested try-catch-finally blocks to a specified depth (default = 1).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"allowed nesting depth. Default is 1."}]},
  {"title":"Newline At End Of File","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck","plugin":"checkstyle","description":"Checks that there is a newline at the end of each file. Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline.","priority":"MINOR","status":"INACTIVE","params":[{"name":"lineSeparator","description":"type of line separator. One of 'system' (system default), 'crlf' (Windows-style), 'cr' (Mac-style) and 'lf' (Unix-style)."},{"name":"fileExtensions","description":"file type extension of the files to check."}]},
  {"title":"No Clone Check","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NoCloneCheck","plugin":"checkstyle","description":"<p> Checks that the clone method is not overridden from the Object class.</p>\n\n<p>Rationale: The clone method relies on strange/hard to follow rules that do not work it all situations. Consequently, it is difficult to override correctly. Below are some of the rules/reasons why the clone method should be avoided.\n<ul>\n    <li>Classes supporting the clone method should implement the Cloneable interface but the Cloneable interface does not include the clone method. As a result, it doesn't enforce the method override.</li>\n    <li>The Cloneable interface forces the Object's clone method to work correctly. Without implementing it, the Object's clone method will throw a CloneNotSupportedException.</li>\n    <li>Non-final classes must return the object returned from a call to super.clone().</li>\n    <li>Final classes can use a constructor to create a clone which is different from non-final classes.</li>\n    <li>If a super class implements the clone method incorrectly all subclasses calling super.clone() are doomed to failure.</li>\n    <li>If a class has references to mutable objects then those object references must be replaced with copies in the clone method after calling super.clone().</li>\n    <li>The clone method does not work correctly with final mutable object references because final references cannot be reassigned.</li>\n    <li>If a super class overrides the clone method then all subclasses must provide a correct clone implementation.</li>\n</ul></p>\n<p>Two alternatives to the clone method, in some cases, is a copy constructor or a static factory method to return copies of an object. Both of these approaches are simpler and do not conflict with final fields. The do not force the calling client to handle a CloneNotSuportException. They also are typed therefore no casting is necessary. Finally, they are more flexible since they can take interface types rather than concrete classes.</p>\n\n<p>Sometimes a copy constructor or static factory is not an acceptable alternative to the clone method. The example below highlights the limitation of a copy constructor (or static factory). Assume Square is a subclass for Shape.</p>\n<p>\n<pre>\n  Shape s1 = new Square();\n  System.out.println(s1 instanceof Square); //true\n</pre></p>\n<p>...assume at this point the code knows nothing of s1 being a Square that's the beauty of polymorphism but the code wants to copy the Square which is declared as a Shape, its super type...</p>\n<p>\n<pre>\n  Shape s2 = new Shape(s1); //using the copy constructor\n  System.out.println(s2 instanceof Square); //false\n</pre></p>\n\n<p>The working solution (without knowing about all subclasses and doing many casts) is to do the following (assuming correct clone implementation).<br/>\n<pre>\n  Shape s2 = s1.clone();\n  System.out.println(s2 instanceof Square); //true\n</pre></p>\n\n<p>Just keep in mind if this type of polymorphic cloning is required then a properly implemented clone method may be the best choice.</p>\n\n<p>Much of this information was taken from Effective Java: Programming Language Guide First Edition by Joshua Bloch pages 45-52. Give Bloch credit for writing an excellent book.</p>\n\n<p>This check is almost exactly the same as the \"No Finalizer Check\".</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"No Finalizer","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NoFinalizerCheck","plugin":"checkstyle","description":"<p>Verifies there are no finalize() methods defined in a class.</p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"No Whitespace After","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck","plugin":"checkstyle","description":"Checks that there is no whitespace after a token.","priority":"MINOR","status":"INACTIVE","params":[{"name":"allowLineBreaks","description":"whether whitespace is allowed if the token is at a linebreak. Default is true."},{"name":"tokens","description":"tokens to check"}]},
  {"title":"No Whitespace Before","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck","plugin":"checkstyle","description":"Checks that there is no whitespace before a token.","priority":"MINOR","status":"INACTIVE","params":[{"name":"allowLineBreaks","description":"whether whitespace is allowed if the token is at a linebreak. Default is false."},{"name":"tokens","description":"tokens to check"}]},
  {"title":"No package","key":"pmd:NoPackage","plugin":"pmd","description":"Detects when a class or interface does not have a package definition. Example :\n  <pre>\n// no package declaration\npublic class ClassInDefaultPackage {\n}\n  </pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Non Case Label In Switch Statement","key":"pmd:NonCaseLabelInSwitchStatement","plugin":"pmd","description":"A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Non Static Initializer","key":"pmd:NonStaticInitializer","plugin":"pmd","description":"A nonstatic initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing. Example :<br/><code>public class MyClass {<br/>// this block gets run before any call to a constructor {<br/>System.out.println(\"I am about to construct myself\");<br/>}<br/>}</code>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Non Thread Safe Singleton","key":"pmd:NonThreadSafeSingleton","plugin":"pmd","description":"Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom). See Effective Java, item 48.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"checkNonStaticMethods","description":"Do not set this to false and checkNonStaticFields to true. Default is true."},{"name":"checkNonStaticFields","description":"Do not set this to true and checkNonStaticMethods to false. Default is false."}]},
  {"title":"Non-transient non-serializable instance field in serializable class","key":"findbugs:SE_BAD_FIELD","plugin":"findbugs","description":"<p>\n      This Serializable class defines a non-primitive instance field which is neither transient, \n      Serializable, or <code>java.lang.Object</code>, and does not appear to implement the <code>Externalizable</code> \n      interface or the <code>readObject()</code> and <code>writeObject()</code> methods.  \n      Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Null Assignment","key":"pmd:NullAssignment","plugin":"pmd","description":"Assigning a null to a variable (outside of its declaration) is usually bad form. Some times, the assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may in rare cases be useful to encourage garbage collection. If that's what you're using it for, by all means, disregard this rule :-)","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Only One Return","key":"pmd:OnlyOneReturn","plugin":"pmd","description":"A method should have only one exit point, and that should be the last statement in the method.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Operator Wrap","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck","plugin":"checkstyle","description":"Checks the policy on how to wrap lines on operators.","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on how to wrap lines. 'nl' : the operator must be on a new line, 'eol' : the operator must be at the end of the line. Default is 'nl'."},{"name":"tokens","description":"tokens to check"}]},
  {"title":"Optimizable To Array Call","key":"pmd:OptimizableToArrayCall","plugin":"pmd","description":"A call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Outer Type Number","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.OuterTypeNumberCheck","plugin":"checkstyle","description":"<p> Checks for the number of types declared at the outer (or root) level in a file. Rationale: It is considered good practice to only define one outer type per file.</p>","priority":"MINOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowable number of outer types. Default is 1."}]},
  {"title":"Override both equals and hashcode","key":"pmd:OverrideBothEqualsAndHashcode","plugin":"pmd","description":"Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass. Example :\n<pre>\n// this is bad\npublic class Bar {\n  public boolean equals(Object o) {\n      // do some comparison\n  }\n}\n\n// and so is this\npublic class Baz {\n  public int hashCode() {\n      // return some hash value\n  }\n}\n\n// this is OK\npublic class Foo {\n  public boolean equals(Object other) {\n      // do some comparison\n  }\n  public int hashCode() {\n      // return some hash value\n  }\n}\n</pre>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Package Annotation","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.PackageAnnotationCheck","plugin":"checkstyle","description":"<p>This check makes sure that all package annotations are in the package-info.java file.</p>\n<p>According to the Java JLS 3rd ed.</p>\n<p>The JLS does not enforce the placement of package annotations. This placement may vary based on implementation. The JLS does highly recommend that all package annotations are placed in the package-info.java file. See <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html\">Java Language specification, sections 7.4.1.1</a>.</p>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Package Declaration","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck","plugin":"checkstyle","description":"Ensures there is a package declaration.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Package Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck","plugin":"checkstyle","description":"Checks that package names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for packages"}]},
  {"title":"Package case","key":"pmd:PackageCase","plugin":"pmd","description":"Detects when a package definition contains upper case characters. Example :\n<pre>\npackage com.MyCompany;  // <- should be lower case name\npublic class SomeClass {\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Parameter Assignment","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.ParameterAssignmentCheck","plugin":"checkstyle","description":"Disallow assignment of parameters.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Parameter Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck","plugin":"checkstyle","description":"Checks that parameter names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for parameters"}]},
  {"title":"Parameter Number","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck","plugin":"checkstyle","description":"Checks the number of parameters that a method or constructor has.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowable number of parameters. Default is 7."},{"name":"tokens","description":"declarations to check"}]},
  {"title":"Paren Pad","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck","plugin":"checkstyle","description":"Checks the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden, with the exception that it does not check for padding of the right parenthesis at an empty for iterator.","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on how to pad parentheses"},{"name":"tokens","description":"tokens to check"}]},
  {"title":"Performance - Could be refactored into a named static inner class","key":"findbugs:SIC_INNER_SHOULD_BE_STATIC_ANON","plugin":"findbugs","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Could be refactored into a static inner class","key":"findbugs:SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS","plugin":"findbugs","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Explicit garbage collection; extremely dubious except in benchmarking code","key":"findbugs:DM_GC","plugin":"findbugs","description":"<p> Code explicitly invokes garbage collection.\n  Except for specific use in benchmarking, this is very dubious.</p>\n  <p>In the past, situations where people have explicitly invoked\n  the garbage collector in routines such as close or finalize methods\n  has led to huge performance black holes. Garbage collection\n   can be expensive. Any situation that forces hundreds or thousands\n   of garbage collections will bring the machine to a crawl.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Huge string constants is duplicated across multiple class files","key":"findbugs:HSC_HUGE_SHARED_STRING_CONSTANT","plugin":"findbugs","description":"<p>\n\tA large String constant is duplicated across multiple class files. \n\tThis is likely because a final field is initialized to a String constant, and the Java language\n\tmandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a>\n\tfor a description of an occurrence of this bug in the JDK and how resolving it reduced\n\tthe size of the JDK by 1 megabyte.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Inefficient use of keySet iterator instead of entrySet iterator","key":"findbugs:WMI_WRONG_MAP_ITERATOR","plugin":"findbugs","description":"<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Maps and sets of URLs can be performance hogs","key":"findbugs:DMI_COLLECTION_OF_URLS","plugin":"findbugs","description":"<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Performance - Method allocates a boxed primitive just to call toString","key":"findbugs:DM_BOXED_PRIMITIVE_TOSTRING","plugin":"findbugs","description":"<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method allocates an object, only to get the class object","key":"findbugs:DM_NEW_FOR_GETCLASS","plugin":"findbugs","description":"<p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method calls static Math class method on a constant value","key":"findbugs:UM_UNNECESSARY_MATH","plugin":"findbugs","description":"<p> This method uses a static method from java.lang.Math on a constant value. This method's\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Method concatenates strings using + in a loop","key":"findbugs:SBSC_USE_STRINGBUFFER_CONCATENATION","plugin":"findbugs","description":"<p> The method seems to be building a String using concatenation in a loop.\nIn each iteration, the String is converted to a StringBuffer/StringBuilder,\n   appended to, and converted back to a String.\n   This can lead to a cost quadratic in the number of iterations,\n   as the growing string is recopied in each iteration. </p>\n\n<p>Better performance can be obtained by using\na StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n\n<p> For example:</p>\n<pre>\n  // This is bad\n  String s = \"\";\n  for (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n  }\n\n  // This is better\n  StringBuffer buf = new StringBuffer();\n  for (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n  }\n  String s = buf.toString();\n</pre>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead","key":"findbugs:DM_BOOLEAN_CTOR","plugin":"findbugs","description":"<p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","key":"findbugs:DM_NUMBER_CTOR","plugin":"findbugs","description":"<p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead","key":"findbugs:DM_FP_NUMBER_CTOR","plugin":"findbugs","description":"<p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method invokes inefficient new String() constructor","key":"findbugs:DM_STRING_VOID_CTOR","plugin":"findbugs","description":"<p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>\"\"</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method invokes inefficient new String(String) constructor","key":"findbugs:DM_STRING_CTOR","plugin":"findbugs","description":"<p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Method invokes toString() method on a String","key":"findbugs:DM_STRING_TOSTRING","plugin":"findbugs","description":"<p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>","priority":"INFO","status":"ACTIVE"},
  {"title":"Performance - Method uses toArray() with zero-length array argument","key":"findbugs:ITA_INEFFICIENT_TO_ARRAY","plugin":"findbugs","description":"<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Primitive value is boxed and then immediately unboxed","key":"findbugs:BX_BOXING_IMMEDIATELY_UNBOXED","plugin":"findbugs","description":"<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n\tboxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Primitive value is boxed then unboxed to perform primitive coercion","key":"findbugs:BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION","plugin":"findbugs","description":"<p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Private method is never called","key":"findbugs:UPM_UNCALLED_PRIVATE_METHOD","plugin":"findbugs","description":"<p> This private method is never called. Although it is\npossible that the method will be invoked through reflection,\nit is more likely that the method is never used, and should be\nremoved.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Performance - Should be a static inner class","key":"findbugs:SIC_INNER_SHOULD_BE_STATIC","plugin":"findbugs","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - The equals and hashCode methods of URL are blocking","key":"findbugs:DMI_BLOCKING_METHODS_ON_URL","plugin":"findbugs","description":"<p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Performance - Unread field","key":"findbugs:URF_UNREAD_FIELD","plugin":"findbugs","description":"<p> This field is never read.&nbsp; Consider removing it from the class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Unread field: should this field be static?","key":"findbugs:SS_SHOULD_BE_STATIC","plugin":"findbugs","description":"<p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Unused field","key":"findbugs:UUF_UNUSED_FIELD","plugin":"findbugs","description":"<p> This field is never used.&nbsp; Consider removing it from the class.</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer","key":"findbugs:DM_NEXTINT_VIA_NEXTDOUBLE","plugin":"findbugs","description":"<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Position Literals First In Comparisons","key":"pmd:PositionLiteralsFirstInComparisons","plugin":"pmd","description":"Position literals first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Preserve Stack Trace","key":"pmd:PreserveStackTrace","plugin":"pmd","description":"Throwing a new exception from a catch block without passing the original exception into the new Exception will cause the true stack trace to be lost, and can make it difficult to debug effectively.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Proper Logger","key":"pmd:ProperLogger","plugin":"pmd","description":"Logger should normally be defined private static final and have the correct class. Private final Log log; is also allowed for rare cases when loggers need to be passed around, but the logger needs to be passed into the constructor.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"staticLoggerName","description":"Default is LOG"}]},
  {"title":"Proper clone implementation","key":"pmd:ProperCloneImplementation","plugin":"pmd","description":"Object clone() should be implemented with super.clone(). Example :\n  <pre>\nclass Foo{\n    public Object clone(){\n        return new Foo(); // This is bad\n    }\n}\n  </pre>","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Redundant Modifier","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck","plugin":"checkstyle","description":"Checks for redundant modifiers in interface and annotation definitions.","priority":"MINOR","status":"ACTIVE","params":[{"name":"tokens","description":"tokens to check"}]},
  {"title":"Redundant Throws","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.RedundantThrowsCheck","plugin":"checkstyle","description":"Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception.","priority":"MINOR","status":"ACTIVE","params":[{"name":"allowUnchecked","description":"whether unchecked exceptions in throws are allowed or not. Default is false."},{"name":"allowSubclasses","description":"whether subclass of another declared exception is allowed in throws clause. Default is false."}]},
  {"title":"Redundant import","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.RedundantImportCheck","plugin":"checkstyle","description":"Checks for redundant import statements. An import statement is considered redundant if:\n<ul>\n    <li>It is a duplicate of another import. This is, when a class is imported more than once.</li>\n    <li>The class imported is from the java.lang package, e.g. importing java.lang.String.</li>\n    <li>The class imported is from the same package.</li></ul>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Regexp","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.RegexpCheck","plugin":"checkstyle","description":"A check that makes sure that a specified pattern exists (or not) in the file.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"pattern"},{"name":"message","description":"message which is used to notify about violations, if empty then default(hard-coded) message is used."},{"name":"illegalPattern","description":"Controls whether the pattern is required or illegal. Default is false."},{"name":"duplicateLimit","description":"Controls whether to check for duplicates of a required pattern, any negative value means no checking for duplicates, any positive value is used as the maximum number of allowed duplicates, if the limit is exceeded errors will be logged. Default is -1."},{"name":"errorLimit","description":"Controls the maximum number of errors before the check will abort. Default is 100."},{"name":"ignoreComments","description":"Controls whether to ignore matches found within comments. Default is false."}]},
  {"title":"Regexp Header","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck","plugin":"checkstyle","description":"<p>Checks the header of a source file against a header that contains a regular expression for each line of the source header.</p>\n\t<p>Rationale: In some projects checking against a fixed header is not sufficient, e.g. the header might require a copyright line where the year information is not static. For example, consider the following header:</p>\n<pre>\n\tline  1: ^/{71}$\n\tline  2: ^// checkstyle:$\n\tline  3: ^// Checks Java source code for adherence to a set of rules\\.$\n\tline  4: ^// Copyright \\(C\\) \\d\\d\\d\\d  Oliver Burn$\n\tline  5: ^// Last modification by \\$Author.*\\$$\n\tline  6: ^/{71}$\n\tline  7:\n\tline  8: ^package\n\tline  9:\n\tline 10: ^import\n\tline 11:\n\tline 12: ^/\\*\\*\n\tline 13: ^ \\*([^/]|$)\n\tline 14: ^ \\*/\n</pre>\n<p>Lines 1 and 6 demonstrate a more compact notation for 71 '/' characters. Line 4 enforces that the copyright notice includes a four digit year. Line 5 is an example how to enforce revision control keywords in a file header. Lines 12-14 is a template for javadoc (line 13 is so complicated to remove conflict with and of javadoc comment).</p>\n<p>Different programming languages have different comment syntax rules, but all of them start a comment with a non-word character. Hence you can often use the non-word character class to abstract away the concrete comment syntax and allow checking the header for different languages with a single header definition. For example, consider the following header specification (note that this is not the full Apache license header):</p>\n<pre>\n\tline 1: ^#!\n\tline 2: ^<\\?xml.*>$\n\tline 3: ^\\W*$\n\tline 4: ^\\W*Copyright 2006 The Apache Software Foundation or its licensors, as applicable\\.$\n\tline 5: ^\\W*Licensed under the Apache License, Version 2\\.0 \\(the \"License\"\\);$\n\tline 6: ^\\W*$\n</pre>\n<p>Lines 1 and 2 leave room for technical header lines, e.g. the \"#!/bin/sh\" line in Unix shell scripts, or the xml file header of XML files. Set the multiline property to \"1, 2\" so these lines can be ignored for file types where they do no apply. Lines 3 through 6 define the actual header content. Note how lines 2, 4 and 5 use escapes for characters that have special regexp semantics.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"header","description":"the required header specified inline. Individual header lines must be separated by the string \"\\n\" (even on platforms with a different line separator), and regular expressions must not span multiple lines."},{"name":"ignoreLines","description":"line numbers to repeat (zero or more times)"}]},
  {"title":"Regexp Multiline","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck","plugin":"checkstyle","description":"<p>A check for detecting that matches across multiple lines. Rationale: This check can be used to when the regular expression can be span multiple lines.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"illegal pattern. Default value is ^$ (empty)."},{"name":"message","description":"message which is used to notify about violations, if empty then default(hard-coded) message is used. Default value is \"\" (empty)."},{"name":"ignoreCase","description":"Controls whether to ignore case when searching. Default value is false."},{"name":"minimum","description":"The minimum number of matches required in each file. Default value is 0."},{"name":"maximum","description":"The maximum number of matches required in each file. Default value is 0."}]},
  {"title":"Regexp Singleline","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck","plugin":"checkstyle","description":"<p> A check for detecting single lines that match a supplied regular expression. Works with any file type. Rationale: This check can be used to prototype checks and to find common bad practice such as calling ex.printStacktrace(), System.out.println(), System.exit(), etc.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"illegal pattern. Default value is ^$ (empty)."},{"name":"message","description":"message which is used to notify about violations, if empty then default(hard-coded) message is used. Default value is \"\" (empty)."},{"name":"ignoreCase","description":"Controls whether to ignore case when searching. Default value is false."},{"name":"minimum","description":"The minimum number of matches required in each file. Default value is 0."},{"name":"maximum","description":"The maximum number of matches required in each file. Default value is 0."}]},
  {"title":"Regexp Singleline Java","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck","plugin":"checkstyle","description":"<p>This class is variation on RegexpSingleline for detecting single lines that match a supplied regular expression in Java files. It supports suppressing matches in Java comments.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"illegal pattern. Default value is ^$ (empty)."},{"name":"message","description":"message which is used to notify about violations, if empty then default(hard-coded) message is used. Default value is \"\" (empty)."},{"name":"ignoreCase","description":"Controls whether to ignore case when searching. Default value is false."},{"name":"minimum","description":"The minimum number of matches required in each file. Default value is 0."},{"name":"maximum","description":"The maximum number of matches required in each file. Default value is 0."},{"name":"ignoreComments","description":"Controls whether to ignore text in comments when searching. Default value is false."}]},
  {"title":"Remote Interface Naming Convention","key":"pmd:RemoteInterfaceNamingConvention","plugin":"pmd","description":"Remote Interface of a Session EJB should NOT be suffixed.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Remote Session Interface Naming Convention","key":"pmd:RemoteSessionInterfaceNamingConvention","plugin":"pmd","description":"Remote Home interface of a Session EJB should be suffixed by \"Home\".","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Replace Enumeration With Iterator","key":"pmd:ReplaceEnumerationWithIterator","plugin":"pmd","description":"Consider replacing this Enumeration with the newer java.util.Iterator","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Replace Hashtable With Map","key":"pmd:ReplaceHashtableWithMap","plugin":"pmd","description":"Consider replacing this Hashtable with the newer java.util.Map","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Replace Vector With List","key":"pmd:ReplaceVectorWithList","plugin":"pmd","description":"Consider replacing Vector usages with the newer java.util.ArrayList if expensive threadsafe operation is not required.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Require This","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck","plugin":"checkstyle","description":"Checks that code doesn't rely on the this default.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"checkFields","description":"whether we should check fields usage or not. Default is true."},{"name":"checkMethods","description":"whether we should check methods usage or not. Default is true."}]},
  {"title":"Return Count","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck","plugin":"checkstyle","description":"Restricts return statements to a specified count (default = 2).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowed number of return statments"},{"name":"format","description":"method names to ingone"}]},
  {"title":"Return From Finally Block","key":"pmd:ReturnFromFinallyBlock","plugin":"pmd","description":"Avoid returning from a finally block - this can discard exceptions.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Return empty array rather than null","key":"pmd:ReturnEmptyArrayRatherThanNull","plugin":"pmd","description":"For any method that returns an array, it's a better behavior to return an empty array rather than a null reference. Example :\n<pre>\npublic class Example\n{\n  // Not a good idea...\n  public int []badBehavior()\n  {\n    // ...\n    return null;\n  }\n\n  // Good behavior\n  public String[] bonnePratique()\n  {\n    //...\n    return new String[0];\n  }\n}\n</pre>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Right Curly","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck","plugin":"checkstyle","description":"Checks the placement of right curly braces.","priority":"MINOR","status":"INACTIVE","params":[{"name":"option","description":"policy on placement of a right curly brace ('}')"},{"name":"tokens","description":"blocks to check"}]},
  {"title":"Security - A prepared statement is generated from a nonconstant String","key":"findbugs:SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING","plugin":"findbugs","description":"<p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - Array is stored directly","key":"pmd:ArrayIsStoredDirectly","plugin":"pmd","description":"Constructors and methods receiving arrays should clone objects and store the copy. This prevents that future changes from the user affect the internal functionality.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - Empty database password","key":"findbugs:DMI_EMPTY_DB_PASSWORD","plugin":"findbugs","description":"<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password. \n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - HTTP Response splitting vulnerability","key":"findbugs:HRS_REQUEST_PARAMETER_TO_HTTP_HEADER","plugin":"findbugs","description":"<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Security - HTTP cookie formed from untrusted input","key":"findbugs:HRS_REQUEST_PARAMETER_TO_COOKIE","plugin":"findbugs","description":"<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Security - Hardcoded constant database password","key":"findbugs:DMI_CONSTANT_DB_PASSWORD","plugin":"findbugs","description":"<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can \n\teasily learn the password.\n</p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Security - JSP reflected cross site scripting vulnerability","key":"findbugs:XSS_REQUEST_PARAMETER_TO_JSP_WRITER","plugin":"findbugs","description":"<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - Method returns internal array","key":"pmd:MethodReturnsInternalArray","plugin":"pmd","description":"Exposing internal arrays directly allows the user to modify some code that could be critical. It is safer to return a copy of the array.","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Security - Nonconstant string passed to execute method on an SQL statement","key":"findbugs:SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE","plugin":"findbugs","description":"<p>The method invokes the execute method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - Servlet reflected cross site scripting vulnerability","key":"findbugs:XSS_REQUEST_PARAMETER_TO_SEND_ERROR","plugin":"findbugs","description":"<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Security - Servlet reflected cross site scripting vulnerability","key":"findbugs:XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER","plugin":"findbugs","description":"<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Short Variable","key":"pmd:ShortVariable","plugin":"pmd","description":"Detects when a field, local, or parameter has a very short name.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Signature Declare Throws Exception","key":"pmd:SignatureDeclareThrowsException","plugin":"pmd","description":"It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Simple Date Format Needs Locale","key":"pmd:SimpleDateFormatNeedsLocale","plugin":"pmd","description":"Be sure to specify a Locale when creating a new instance of SimpleDateFormat.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Simplify Boolean Expression","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck","plugin":"checkstyle","description":"Checks for overly complicated boolean expressions.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Simplify Boolean Return","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck","plugin":"checkstyle","description":"Checks for overly complicated boolean return statements.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Simplify Conditional","key":"pmd:SimplifyConditional","plugin":"pmd","description":"No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Simplify Starts With","key":"pmd:SimplifyStartsWith","plugin":"pmd","description":"Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Simplify boolean returns","key":"pmd:SimplifyBooleanReturns","plugin":"pmd","description":"Avoid unnecessary if..then..else statements when returning a boolean. Example :\n<pre>\npublic class Foo {\n  private int bar =2;\n  public boolean isBarEqualsTo(int x) {\n    // this bit of code\n    if (bar == x) {\n     return true;\n    } else {\n     return false;\n    }\n    // can be replaced with a simple\n    // return bar == x;\n  }\n}\n</pre>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Singular Field","key":"pmd:SingularField","plugin":"pmd","description":"A field that's only used by one method could perhaps be replaced by a local variable.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Static EJB Field Should Be Final","key":"pmd:StaticEJBFieldShouldBeFinal","plugin":"pmd","description":"According to the J2EE specification (p.494), an EJB should not have any static fields with write access. However, static read only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Static Variable Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.StaticVariableNameCheck","plugin":"checkstyle","description":"Checks that static, non-final variable names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for static, non-final fields"}]},
  {"title":"Strict Duplicate Code","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.duplicates.StrictDuplicateCodeCheck","plugin":"checkstyle","description":"Performs a line-by-line comparison of all code lines and reports duplicate code if a sequence of lines differs only in indentation.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"min","description":"how many lines must be equal to be considered a duplicate. Default is 12."},{"name":"charset","description":"name of the file charset"}]},
  {"title":"Strict Exception - Avoid throwing new instance of same exception","key":"pmd:AvoidThrowingNewInstanceOfSameException","plugin":"pmd","description":"Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity. Example :\n<pre>\npublic class Foo {\n  void bar() {\n    try {\n      // do something\n    }  catch (SomeException se) {\n      // harmless comment\n      throw new SomeException(se);\n    }\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Strict Exception - Do not throw exception in finally","key":"pmd:DoNotThrowExceptionInFinally","plugin":"pmd","description":"Throwing exception in a finally block is confusing. It may mask exception or a defect of the code, it also render code cleanup uninstable. Example :\n<pre>\npublic class Foo\n{\n  public void bar()\n\t{\n\t  try {\n\t\t// Here do some stuff\n\t\t}\n\t\tcatch( Exception e) {\n\t\t// Handling the issue\n\t\t}\n\t\tfinally\n\t\t{\n\t\t  // is this really a good idea ?\n\t\t\tthrow new Exception();\n\t  }\n  }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"String Buffer Instantiation With Char","key":"pmd:StringBufferInstantiationWithChar","plugin":"pmd","description":"StringBuffer sb = new StringBuffer('c'); The char will be converted into int to intialize StringBuffer size.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"String Instantiation","key":"pmd:StringInstantiation","plugin":"pmd","description":"Avoid instantiating String objects; this is usually unnecessary.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"String Literal Equality","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck","plugin":"checkstyle","description":"Checks that string literals are not used with == or !=.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"String To String","key":"pmd:StringToString","plugin":"pmd","description":"Avoid calling toString() on String objects; this is unnecessary.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Super Clone","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck","plugin":"checkstyle","description":"Checks that an overriding clone() method invokes super.clone().","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Super Finalize","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.SuperFinalizeCheck","plugin":"checkstyle","description":"Checks that an overriding finalize() method invokes super.finalize().","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Suppress Warnings","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck","plugin":"checkstyle","description":"<p> This check allows you to specify what warnings that SuppressWarnings is not allowed to suppress. You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on.</p>\n<p>Limitations: This check does not consider conditionals inside the SuppressWarnings annotation.\nFor example: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\") According to the above example, the \"unused\" warning is being suppressed not the \"unchecked\" or \"foo\" warnings. All of these warnings will be considered and matched against regardless of what the conditional evaluates to.</p>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"The warnings property is a regex pattern. Any warning being suppressed matching this pattern will be flagged. Default is ^$|^\\s+$"},{"name":"tokens","description":"Tokens to check : CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF  ENUM_CONSTANT_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, CTOR_DEF. Default value is LASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, ENUM_CONSTANT_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, CTOR_DEF."}]},
  {"title":"Suspicious Octal Escape","key":"pmd:SuspiciousOctalEscape","plugin":"pmd","description":"A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit Any octal escape sequence followed by non-octal digits can be confusing, e.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by the literal character 8.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Switch Density","key":"pmd:SwitchDensity","plugin":"pmd","description":"A high ratio of statements to labels in a switch statement implies that the switch statement is doing too much work. Consider moving the statements into new methods, or creating subclasses based on the switch variable.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"minimum","description":"The switch statement ratio reporting threshold. Default is 10."}]},
  {"title":"Switch statement found where default case is missing","key":"findbugs:SF_SWITCH_NO_DEFAULT","plugin":"findbugs","description":"<p>\n      This method contains a switch statement where default case is missing. \n      Usually you need to provide a default case.\n      </p>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Switch statement found where one case falls through to the next case","key":"findbugs:SF_SWITCH_FALLTHROUGH","plugin":"findbugs","description":"<p>\n      This method contains a switch statement where one case branch will fall \n      through to the next case. Usually you need to end this case with a break or return.\n      </p>","priority":"BLOCKER","status":"ACTIVE"},
  {"title":"Switch statements should have default","key":"pmd:SwitchStmtsShouldHaveDefault","plugin":"pmd","description":"Switch statements should have a default label. Example :\n<pre>\npublic class Foo {\n public void bar() {\n  int x = 2;\n  switch (x) {\n   case 2: int j = 8;\n  }\n }\n}\n</pre>","priority":"MAJOR","status":"INACTIVE"},
  {"title":"System Println","key":"pmd:SystemPrintln","plugin":"pmd","description":"System.(out|err).print is used, consider using a logger.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Tag @deprecated","key":"taglist:@deprecated","plugin":"taglist","description":"Detection of keyword '@deprecated' in the source code","priority":"MINOR","status":"INACTIVE"},
  {"title":"Tag @todo","key":"taglist:@todo","plugin":"taglist","description":"Detection of keyword '@todo' in the source code","priority":"MINOR","status":"ACTIVE"},
  {"title":"Tag FIXME","key":"taglist:FIXME","plugin":"taglist","description":"Detection of keyword 'FIXME' in the source code","priority":"MINOR","status":"ACTIVE"},
  {"title":"Tag NO_PMD","key":"taglist:NO_PMD","plugin":"taglist","description":"Detection of keyword 'NO_PMD' in the source code","priority":"MINOR","status":"ACTIVE"},
  {"title":"Tag TODO","key":"taglist:TODO","plugin":"taglist","description":"Detection of keyword 'TODO' in the source code","priority":"MINOR","status":"ACTIVE"},
  {"title":"Tag WTF","key":"taglist:WTF","plugin":"taglist","description":"Detection of keyword 'WTF' in the source code","priority":"MINOR","status":"ACTIVE"},
  {"title":"Throws Count","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck","plugin":"checkstyle","description":"Restricts throws statements to a specified count (default = 1).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"max","description":"maximum allowed number of throws statments"}]},
  {"title":"Too Many Fields","key":"pmd:TooManyFields","plugin":"pmd","description":"Classes that have too many fields could be redesigned to have fewer fields, possibly through some nested object grouping of some of the information. For example, a class with city/state/zip fields could instead have one Address field.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"maxfields","description":"The field count reporting threshold. Default is 15."}]},
  {"title":"Too Many Static Imports","key":"pmd:TooManyStaticImports","plugin":"pmd","description":"If you overuse the static import feature, it can make your program unreadable and  unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).","priority":"MAJOR","status":"INACTIVE","params":[{"name":"maximumStaticImports","description":"All static imports can be disallowed by setting this to 0. Default is 4."}]},
  {"title":"Too few branches for a switch statement","key":"pmd:TooFewBranchesForASwitchStatement","plugin":"pmd","description":"Swith are designed complex branches, and allow branches to share treatement. Using a switch for only a few branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability. Example :\n<pre>\n// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n  public void bar() {\n    switch (condition) {\n      case ONE:\n        instruction;\n        break;\n      default:\n        break; // not enough for a 'switch' stmt,\n               // a simple 'if' stmt would have been more appropriate\n    }\n  }\n}\n</pre>","priority":"MINOR","status":"INACTIVE","params":[{"name":"minimumNumberCaseForASwitch","description":"Minimum number of branches for a switch. Default is 3."}]},
  {"title":"Too many methods","key":"pmd:TooManyMethods","plugin":"pmd","description":"A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"maxmethods","description":"The method count reporting threshold. Default is 10."}]},
  {"title":"Trailing Comment","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.indentation.TrailingCommentCheck","plugin":"checkstyle","description":"The check to ensure that requires that comments be the only thing on a line.","priority":"MINOR","status":"INACTIVE","params":[{"name":"format","description":"pattern for string allowed before comment."},{"name":"legalComment","description":"pattern for text of trailing comment which is allowed. (this patter will not be applied to multiline comments and text of comment will be trimmed before matching)"}]},
  {"title":"Type Name","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.TypeNameCheck","plugin":"checkstyle","description":"Checks that type names conform to a format specified by the format property.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"format","description":"Validates identifiers for classes and interfaces"},{"name":"tokens","description":"Control whether the check applies to classes or interfaces"}]},
  {"title":"Typecast Paren Pad","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck","plugin":"checkstyle","description":"Checks the padding of parentheses for typecasts.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"option","description":"policy on how to pad parentheses"},{"name":"tokens","description":"tokens to check"}]},
  {"title":"Uncommented Empty Constructor","key":"pmd:UncommentedEmptyConstructor","plugin":"pmd","description":"Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"ignoreExplicitConstructorInvocation","description":"Ignore explicit constructor invocation when deciding whether constructor is empty or not. Default is false."}]},
  {"title":"Uncommented Empty Method","key":"pmd:UncommentedEmptyMethod","plugin":"pmd","description":"Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Uncommented Main","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck","plugin":"checkstyle","description":"Detects uncommented main methods.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"excludedClasses","description":"pattern for qualified names of classes which are allowed to have a main method."}]},
  {"title":"Unconditional If Statement","key":"pmd:UnconditionalIfStatement","plugin":"pmd","description":"Do not use if statements that are always true or always false.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Undocumented API","key":"squid:UndocumentedApi","plugin":"squid","description":"<p>Check that each public class, interface, method and constructor has a Javadoc comment. The following public methods/constructors are not concerned by this rule :</p><ul><li>Getter / Setter</li><li>Method with @Override annotation</li><li>Empty constructor</li></ul>","priority":"MAJOR","status":"INACTIVE","params":[{"name":"forClasses","description":"Optional. If this property is not defined, all classes should adhere to this constraint. Ex : **.api.**"}]},
  {"title":"Unnecessary Case Change","key":"pmd:UnnecessaryCaseChange","plugin":"pmd","description":"Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()","priority":"MINOR","status":"ACTIVE"},
  {"title":"Unnecessary Conversion Temporary","key":"pmd:UnnecessaryConversionTemporary","plugin":"pmd","description":"Avoid unnecessary temporaries when converting primitives to Strings","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Unnecessary Final Modifier","key":"pmd:UnnecessaryFinalModifier","plugin":"pmd","description":"When a class has the final modifier, all the methods are automatically final.","priority":"INFO","status":"INACTIVE"},
  {"title":"Unnecessary Local Before Return","key":"pmd:UnnecessaryLocalBeforeReturn","plugin":"pmd","description":"Avoid unnecessarily creating local variables","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unnecessary Parentheses","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck","plugin":"checkstyle","description":"Checks if unnecessary parentheses are used in a statement or expression.","priority":"MINOR","status":"INACTIVE"},
  {"title":"Unnecessary Return","key":"pmd:UnnecessaryReturn","plugin":"pmd","description":"Avoid unnecessary return statements","priority":"MINOR","status":"INACTIVE"},
  {"title":"Unnecessary Wrapper Object Creation","key":"pmd:UnnecessaryWrapperObjectCreation","plugin":"pmd","description":"Parsing method should be called directy instead.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Unnecessary constructor","key":"pmd:UnnecessaryConstructor","plugin":"pmd","description":"This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Unnecessary parentheses","key":"pmd:UnnecessaryParentheses","plugin":"pmd","description":"Sometimes expressions are wrapped in unnecessary parentheses, making them look like a function call. Example :\n<pre>\npublic class Foo {\n  boolean bar() {\n    return (true);\n  }\n}\n  </pre>","priority":"MINOR","status":"INACTIVE"},
  {"title":"Unsynchronized Static Date Formatter","key":"pmd:UnsynchronizedStaticDateFormatter","plugin":"pmd","description":"SimpleDateFormat is not synchronized. Sun recomends separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Unused Imports","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck","plugin":"checkstyle","description":"Checks for unused import statements.","priority":"INFO","status":"ACTIVE"},
  {"title":"Unused Modifier","key":"pmd:UnusedModifier","plugin":"pmd","description":"Fields in interfaces are automatically public static final, and methods are public abstract. Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static). For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.","priority":"INFO","status":"ACTIVE"},
  {"title":"Unused Null Check In Equals","key":"pmd:UnusedNullCheckInEquals","plugin":"pmd","description":"After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unused Private Field","key":"pmd:UnusedPrivateField","plugin":"pmd","description":"Detects when a private field is declared and/or assigned a value, but not used.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unused formal parameter","key":"pmd:UnusedFormalParameter","plugin":"pmd","description":"Avoid passing parameters to methods or constructors and then not using those parameters.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unused imports","key":"pmd:UnusedImports","plugin":"pmd","description":"Avoid unused import statements. Example :\n  <pre>\n// this is bad\nimport java.io.File;\npublic class Foo {}  \n  </pre>","priority":"INFO","status":"INACTIVE"},
  {"title":"Unused local variable","key":"pmd:UnusedLocalVariable","plugin":"pmd","description":"Detects when a local variable is declared and/or assigned, but not used.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unused private method","key":"pmd:UnusedPrivateMethod","plugin":"pmd","description":"Unused Private Method detects when a private method is declared but is unused. This PMD rule should be switched off and replaced by its equivalent from Squid that is more effective : it generates less false-positives and detects more dead code.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Unused private method","key":"squid:UnusedPrivateMethod","plugin":"squid","description":"<p>Private methods that are never executed are dead code. Dead code means unnecessary, inoperative code that should be removed. This helps in maintenance by decreasing the maintained code size, making it easier to understand the program and preventing bugs from being introduced.</p><p>In the following two cases, private methods are not considered as dead code by Sonar :</p><ul><li>Private empty constructors that are intentionally used to prevent any direct instanciation of a class.</li><li>Private methods : readObject(...), writeObject(...), writeReplace(...), readResolve(...) which can contractually be used when implementing the Serializable interface.</li></ul>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Unused protected method","key":"squid:UnusedProtectedMethod","plugin":"squid","description":"<p>Protected methods that are never used by any classes in the same project are strongly suspected to be dead code. Dead code means unnecessary, inoperative code that should be removed. This helps in maintenance by decreasing the maintained code size, making it easier to understand the program and preventing bugs from being introduced.</p><p>In the following case, unused protected methods are not considered as dead code by Sonar :</p><ul><li>Protected methods which override a method from a parent class.</li></ul><ul><li>Protected methods of an abstract class.</li></ul>","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Upper Ell","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.UpperEllCheck","plugin":"checkstyle","description":"Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. \n    This is in accordance to the Java Language Specification, <a href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282\">Section 3.10.1</a>.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Use Array List Instead Of Vector","key":"pmd:UseArrayListInsteadOfVector","plugin":"pmd","description":"ArrayList is a much better Collection implementation than Vector.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Use Arrays As List","key":"pmd:UseArraysAsList","plugin":"pmd","description":"The class java.util.Arrays has a asList method that should be use when you want to create a new List from an array of objects. It is faster than executing a loop to cpy all the elements of the array one by one","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Use Collection Is Empty","key":"pmd:UseCollectionIsEmpty","plugin":"pmd","description":"The isEmpty() method on java.util.Collection is provided to see if a collection has any elements. Comparing the value of size() to 0 merely duplicates existing behavior.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Use Correct Exception Logging","key":"pmd:UseCorrectExceptionLogging","plugin":"pmd","description":"To make sure the full stacktrace is printed out, use the logging statement with 2 arguments: a String and a Throwable.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Use Equals To Compare Strings","key":"pmd:UseEqualsToCompareStrings","plugin":"pmd","description":"Using \"==\" or \"!=\" to compare strings only works if intern version is used on both sides.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Use Index Of Char","key":"pmd:UseIndexOfChar","plugin":"pmd","description":"Use String.indexOf(char) when checking for the index of a single character; it executes faster.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Use Locale With Case Conversions","key":"pmd:UseLocaleWithCaseConversions","plugin":"pmd","description":"When doing a String.toLowerCase()/toUpperCase() call, use a Locale. This avoids problems with certain locales, i.e. Turkish.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Use Notify All Instead Of Notify","key":"pmd:UseNotifyAllInsteadOfNotify","plugin":"pmd","description":"Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Use Proper Class Loader","key":"pmd:UseProperClassLoader","plugin":"pmd","description":"In J2EE getClassLoader() might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.","priority":"CRITICAL","status":"INACTIVE"},
  {"title":"Use Singleton","key":"pmd:UseSingleton","plugin":"pmd","description":"If you have a class that has nothing but static methods, consider making it a Singleton. Note that this doesn't apply to abstract classes, since their subclasses may well include non-static methods. Also, if you want this class to be a Singleton, remember to add a private constructor to prevent instantiation.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Use String Buffer For String Appends","key":"pmd:UseStringBufferForStringAppends","plugin":"pmd","description":"Finds usages of += for appending strings.","priority":"MAJOR","status":"INACTIVE"},
  {"title":"Use String Buffer Length","key":"pmd:UseStringBufferLength","plugin":"pmd","description":"Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals() or StringBuffer.toString().length() ==.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Useless Operation On Immutable","key":"pmd:UselessOperationOnImmutable","plugin":"pmd","description":"An operation on an Immutable object (BigDecimal or BigInteger) won't change the object itself. The result of the operation is a new object. Therefore, ignoring the operation result is an error.","priority":"CRITICAL","status":"ACTIVE"},
  {"title":"Useless Overriding Method","key":"pmd:UselessOverridingMethod","plugin":"pmd","description":"The overriding method merely calls the same method defined in a superclass","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Useless String Value Of","key":"pmd:UselessStringValueOf","plugin":"pmd","description":"No need to call String.valueOf to append to a string; just use the valueOf() argument directly.","priority":"MINOR","status":"ACTIVE"},
  {"title":"Visibility Modifier","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck","plugin":"checkstyle","description":"Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"packageAllowed","description":"whether package visible members are allowed. Default is false."},{"name":"protectedAllowed","description":"whether protected members are allowed. Default is false."},{"name":"publicMemberPattern","description":"pattern for public members that should be ignored. Default is ^serialVersionUID$."}]},
  {"title":"While Loops Must Use Braces","key":"pmd:WhileLoopsMustUseBraces","plugin":"pmd","description":"Avoid using 'while' statements without using curly braces.","priority":"MAJOR","status":"ACTIVE"},
  {"title":"Whitespace After","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck","plugin":"checkstyle","description":"Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check"}]},
  {"title":"Whitespace Around","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck","plugin":"checkstyle","description":"Checks that a token is surrounded by whitespace.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tokens","description":"tokens to check"},{"name":"allowEmptyConstructors","description":"allow empty constructor bodies. Default is false."},{"name":"allowEmptyMethods","description":"allow empty method bodies. Default is false."}]},
  {"title":"Write Tag","key":"checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck","plugin":"checkstyle","description":"Outputs a JavaDoc tag as information. Can be used e.g. with the stylesheets that sort the report by author name. To define the format for a tag, set property tagFormat to a regular expression. This check uses two different severity levels. The normal one is used for reporting when the tag is missing. The additional one (tagSeverity) is used for the level of reporting when the tag exists.","priority":"MINOR","status":"INACTIVE","params":[{"name":"tag","description":"Name of tag"},{"name":"tagFormat","description":"Format of tag"},{"name":"tagSeverity","description":"Severity level when tag is found and printed. Default is info."}]},
  {"title":"XPath rule template","key":"pmd:XPathRule","plugin":"pmd","description":"PMD provides a very handy method for creating new rules by writing an XPath query. When the XPath query finds a match, a violation is created.\n    Let's take a simple example : assume we have a Factory class that must be always declared final. \n    We'd like to report a violation each time a declaration of Factory is not declared final. Consider the following class: :\n<pre>\npublic class a {\n\tFactory f1;\n\n\tvoid myMethod() {\n\t\tFactory f2;\n\t\tint a;\n\t}\n}\n</pre>\n\tThe following expression does the magic we need:\n<pre>\n//VariableDeclarator\n [../Type/ReferenceType/ClassOrInterfaceType\n  [@Image = 'Factory'] and ..[@Final='false']]\n</pre>\n\tSee the <a href=\"http://pmd.sourceforge.net/xpathruletutorial.html\">XPath rule tutorial</a> for more information.","priority":"MAJOR","status":"INACTIVE","params":[{"name":"xpath","description":"XPath expressions."},{"name":"message","description":"Message to display when a violation occurs."}]}
]